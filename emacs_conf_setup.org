#+TITLE: Basic Emacs Variable Configuration
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: comments both
* Platform Variables
Set up some simple platform finding variables that may or may not work
#+begin_src emacs-lisp
(setq mswindows-p (string-match "windows" (symbol-name system-type)))
(setq macosx-p (string-match "darwin" (symbol-name system-type)))
(setq linux-p (string-match "gnu/linux" (symbol-name system-type)))
#+end_src

* CEDET Loading
Load cedet first, otherwise we'll conflict against the 1.1 repo stuff

#+begin_src emacs-lisp
(load-file (concat qdot/emacs-autoinst-elisp-dir "cedet/cedet-devel-load.el"))
#+end_src

* Start/Splash Inhibit
#+begin_src emacs-lisp
(setq inhibit-start-message t)
(setq inhibit-splash-screen t)
#+end_src

* Turn off Bell Functions
#+begin_src emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+end_src

* Global font setup

#+begin_src emacs-lisp
;; Platform fonts and meta keys
;; We know we have consolas on OS X, so use it
;; We also need to do this as near the beginning as possible, since it crashes
;; otherwise?
(defun qdot/set-platform-font ()
  "Set the default font for the system type."
  (interactive)
  (when macosx-p
    (set-face-font 'default "consolas-11"))
  (when mswindows-p
    (set-face-font 'default "consolas-8"))
  (when linux-p
    (when (member "Inconsolata" (font-family-list))
      (set-face-font 'default "inconsolata-11"))))

;; (qdot/set-platform-font)
#+end_src

* Platform specific meta keys
#+begin_src emacs-lisp
(when macosx-p
  ;;Change meta to alt
  (setq mac-command-modifier 'meta)
  ;;avoid hiding with M-h
  (setq mac-pass-command-to-system nil))
(when linux-p
  (setq x-alt-keysym 'meta))
#+end_src

* Autosave setup
Put autosave files (ie #foo#) in one place, *not* scattered all over
the file system
#+begin_src emacs-lisp
(defvar autosave-dir (concat user-emacs-directory "autosaves/"))
(make-directory autosave-dir t)
(defun auto-save-file-name-p (filename)
  (string-match "^#.*#$" (file-name-nondirectory filename)))
#+end_src

* Backup file setup
Put backup files (ie foo~) in one place too. (The
backup-directory-alist list contains regexp=>directory mappings;
filenames matching a regexp are backed up in the corresponding
directory. Emacs will mkdir it if necessary.)

#+begin_src emacs-lisp
(defvar backup-dir (concat user-emacs-directory "backups/"))
(make-directory backup-dir t)
(setq backup-directory-alist (list (cons "." backup-dir)))
#+end_src

* Modeline and display setup
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)
  (setq transient-mark-mode t)
  ;; http://www.masteringemacs.org/articles/2011/10/02/improving-performance-emacs-display-engine/
  (setq redisplay-dont-pause t)
  (display-time)
  (line-number-mode t)
  (column-number-mode t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (blink-cursor-mode -1)
  (global-font-lock-mode 1)
#+end_src

* Other setup
#+begin_src emacs-lisp
  (setq indent-tabs-mode nil)
  ;; period single space ends sentence
  (setq sentence-end-double-space nil)
  (setq default-directory "~")
  (setq message-log-max 5000)
  
  (when linux-p
    (setq
     ;; copy emacs clipboard to system
     x-select-enable-clipboard t
     interprogram-paste-function 'x-cut-buffer-or-selection-value
     ))
  (set-default 'indicate-empty-lines t)
  
  (global-auto-revert-mode t)
  
  ;; Transparently open compressed files
  (auto-compression-mode t)
  
  ;; Save a list of recent files visited.
  (recentf-mode 1)
#+end_src

* Firefox Setup

#+begin_src emacs-lisp
  (defun qdot/set-firefox-trunk ()
    (interactive)
    (if linux-p
        (custom-set-variables '(browse-url-firefox-program "firefox-trunk"))))
  
  (defun qdot/set-firefox ()
    (interactive)
    (if linux-p
        (custom-set-variables '(browse-url-firefox-program "firefox"))))
#+end_src

* Byte compile elisp when saved
Byte compile the current buffer on save if a byte compiled version
already exists.

#+begin_src emacs-lisp
  (defun qdot/byte-compile-current-buffer ()
    "`byte-compile' current buffer if it's emacs-lisp-mode and compiled file exists."
    (interactive)
    (when (and (eq major-mode 'emacs-lisp-mode)
               (file-exists-p (byte-compile-dest-file buffer-file-name)))
      (byte-compile-file buffer-file-name)))
  
  (add-hook 'after-save-hook 'qdot/byte-compile-current-buffer)
#+end_src

