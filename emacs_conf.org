#+TITLE: qDot's Emacs Configuration
#+OPTIONS: toc:nil num:nil ^:nil
#+PROPERTY: comments both
* Directory Configuration
Setting up a few different variables for the different types of
directories we have (configurations, locally stored versus el-get
fetched libs, etc...)

- Set up the base configuration directory and filename
#+begin_src emacs-lisp
  (defconst qdot/emacs-conf-dir
    (file-name-directory (or load-file-name (buffer-file-name)))
    "Directory for emacs configuration")

  (defconst qdot/emacs-conf-file
    (expand-file-name (concat qdot/emacs-conf-dir "emacs_conf.org"))
    "Org-babel file for emacs configuration")
#+end_src

- Manually installed/maintained elisp directory
#+begin_src emacs-lisp
  (defconst qdot/emacs-elisp-dir
    (expand-file-name (concat qdot/emacs-conf-dir "elisp/"))
    "Directory for manually installed/maintained elisp files")
#+end_src

- el-get packages directory
#+begin_src emacs-lisp
  (defconst qdot/emacs-autoinst-elisp-dir
    (expand-file-name (concat qdot/emacs-conf-dir "elisp_auto/"))
    "Directory for el-get elisp packages")
#+end_src

- As of emacs 23, ~/.emacs.d is user-emacs-directory
#+begin_src emacs-lisp
  (setq custom-file (concat user-emacs-directory "emacs_conf_custom.el"))
  (if (not (file-exists-p custom-file))
      (with-temp-buffer
        (write-file custom-file)))
#+end_src

- Add configuration and scripts directories to proper variables
#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name qdot/emacs-conf-dir))
  (add-to-list 'load-path (expand-file-name qdot/emacs-elisp-dir))
#+end_src

* Basic Variables and Modes
** Identity
#+begin_src emacs-lisp
  (setq
   user-mail-address "kyle@nonpolynomial.com"
   user-full-name  "Kyle Machulis")
#+end_src
** Platform Variables
Set up some simple platform finding variables that may or may not work
#+begin_src emacs-lisp
  (setq mswindows-p (eq system-type 'windows-nt))
  (setq macosx-p (eq system-type 'darwin))
  (setq linux-p (eq system-type 'gnu/linux))
#+end_src
** CEDET Loading
Load cedet first, otherwise we'll conflict against the 1.1 repo stuff

#+begin_src emacs-lisp
(load-file (concat qdot/emacs-autoinst-elisp-dir "cedet/cedet-devel-load.el"))
#+end_src

** Start/Splash Inhibit
#+begin_src emacs-lisp
(setq inhibit-start-message t)
(setq inhibit-splash-screen t)
#+end_src

** Turn off Bell Functions
#+begin_src emacs-lisp
(setq visible-bell nil)
(setq ring-bell-function 'ignore)
#+end_src

** Global font setup
Use fonts we either know we have, or can check for. This is a function
because it has caused crashes multiple times in the past, usually due
to being run on startup before rendering was set up correctly or
something.

#+begin_src emacs-lisp
  (defun qdot/set-platform-font ()
    "Set the default font for the system type."
    (interactive)
    (when macosx-p
      (set-face-font 'default "consolas-11"))
    (when mswindows-p
      (set-face-font 'default "consolas-10"))
    (when linux-p
      (when (member "Inconsolata" (font-family-list))
        (set-face-font 'default "inconsolata-11"))))

  (qdot/set-platform-font)
#+end_src

** Platform specific meta keys
#+begin_src emacs-lisp
(when macosx-p
  ;;Change meta to alt
  (setq mac-command-modifier 'meta)
  ;;avoid hiding with M-h
  (setq mac-pass-command-to-system nil))
(when linux-p
  (setq x-alt-keysym 'meta))
#+end_src

** Autosave setup
Put autosave files (ie #foo#) in one place, *not* scattered all over
the file system
#+begin_src emacs-lisp
  (defvar qdot/autosave-dir (concat user-emacs-directory "autosaves/"))
  (make-directory qdot/autosave-dir t)
  (defun qdot/auto-save-file-name-p (filename)
    (string-match "^#.*#$" (file-name-nondirectory filename)))
  (setq auto-save-file-name-transforms
            `((".*" ,qdot/autosave-dir t)))
#+end_src

** Backup file setup
Put backup files (ie foo~) in one place too. (The
backup-directory-alist list contains regexp=>directory mappings;
filenames matching a regexp are backed up in the corresponding
directory. Emacs will mkdir it if necessary.)

#+begin_src emacs-lisp
  (setq qdot/backup-dir (expand-file-name (concat user-emacs-directory "backups/")))
  (make-directory qdot/backup-dir t)
  (setq
     backup-by-copying t      ; don't clobber symlinks
     backup-directory-alist
      '(("." . "~/.emacs.d/backups"))    ; don't litter my fs tree
     delete-old-versions t
     kept-new-versions 6
     kept-old-versions 2
     version-control t)       ; use versioned backups
#+end_src

** Save History setup
#+BEGIN_SRC emacs-lisp
(setq savehist-file (concat user-emacs-directory "savehist"))
(savehist-mode 1)
(setq savehist-save-minibuffer-history 1)
(setq savehist-additional-variables
      '(kill-ring
        search-ring
        regexp-search-ring))
#+END_SRC
** Modeline and display setup
Redisplay trick taken from http://www.masteringemacs.org/articles/2011/10/02/improving-performance-emacs-display-engine/
#+begin_src emacs-lisp
  (setq display-time-24hr-format t)
  (setq display-time-day-and-date t)
  (setq transient-mark-mode t)
  (setq redisplay-dont-pause t)
  (display-time)
  (line-number-mode t)
  (column-number-mode t)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
  (blink-cursor-mode -1)
  (global-font-lock-mode 1)
#+end_src

** Other setup
#+begin_src emacs-lisp
  ;; period single space ends sentence
  (setq sentence-end-double-space nil)
  (setq default-directory "~")
  (setq message-log-max 5000)
  
  (when linux-p
    (setq
     ;; copy emacs clipboard to system
     x-select-enable-clipboard t
     interprogram-paste-function 'x-cut-buffer-or-selection-value))
  
  (set-default 'indicate-empty-lines t)
  (global-auto-revert-mode t)
  ;; Transparently open compressed files
  (auto-compression-mode t)
  ;; Save a list of recent files visited.
  (recentf-mode 1)
  ;; When region active, delete actually deletes it
  (delete-selection-mode 1)
  
  (defvar qdot/mail-p
    linux-p
    "Whether mail packages should be initialized")
    
#+end_src
** Package variables that need to be set before loading
#+begin_src emacs-lisp
  
  ;; Variables for packages that need to be set before loading
  (setq jedi:setup-keys t)
  
#+end_src
** Reset yes-or-no-p to y-or-n-p
#+begin_src emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
#+end_src
** Server Setup
#+BEGIN_SRC emacs-lisp
  ;;(setq server-use-tcp t)
  ;;(setq server-host "localhost")
#+END_SRC
* Macros
** eval-after-load macro
Taken from https://github.com/milkypostman/dotemacs/blob/master/init.el
#+BEGIN_SRC emacs-lisp
;;;; macros
(defmacro after (mode &rest body)
  "`eval-after-load' MODE evaluate BODY."
  (declare (indent defun))
  `(eval-after-load ,mode
     '(progn ,@body)))
#+END_SRC
* El-get
Sets up variables for storage locations and status files. If el-get
doesn't currently exist on the system, it downloads the initialization
file and tries to install it. After that, it will pull all packages in
the status file. This is useful for rebuilding from scratch in the git
repo, though it can take a really, really, REALLY long time.

#+begin_src emacs-lisp
  (add-to-list 'load-path (expand-file-name (concat qdot/emacs-autoinst-elisp-dir "el-get")))
  (setq el-get-dir qdot/emacs-autoinst-elisp-dir)
  (setq el-get-verbose t)
  (setq el-get-status-file (expand-file-name (concat qdot/emacs-conf-dir "elget-status.el")))
  (unless (require 'el-get nil t)
    (url-retrieve
     "https://github.com/dimitri/el-get/raw/master/el-get-install.el"
     (lambda (s)
       (end-of-buffer)
       (eval-print-last-sexp))))
  
  (el-get)
#+end_src

* Package Configuration
** bind-key
#+BEGIN_SRC emacs-lisp
  (require 'bind-key)
#+END_SRC
** qdot-funcs
#+BEGIN_SRC emacs-lisp
  (require 'qdot-funcs)
  (global-set-key (kbd "C-c C-s") 'qdot/sudo-edit-current-file)
  (global-set-key (kbd "C-c C-r") 'qdot/reload-file)
  ;; remap C-a to `smarter-move-beginning-of-line'
  (global-set-key [remap move-beginning-of-line]
                  'qdot/smarter-move-beginning-of-line)
  
#+END_SRC
** auto-complete
#+begin_src emacs-lisp
  (require 'auto-complete-config)
  (ac-config-default)
  (ac-flyspell-workaround)
  (ac-linum-workaround)
  (global-auto-complete-mode t)
  (setq ac-auto-start 3
        ac-dwim t
        ac-quick-help-delay 1)
  (setq ac-use-menu-map t)
  ;; Default settings
  (define-key ac-menu-map "\C-n" 'ac-next)
  (define-key ac-menu-map "\C-p" 'ac-previous)
  (define-key ac-complete-mode-map [tab] 'ac-expand)
#+end_src

** eshell
#+BEGIN_SRC emacs-lisp
  ;; ;; Stealing from ESK, with some things removed
  
  (setq eshell-cmpl-cycle-completions nil
        eshell-save-history-on-exit t
        eshell-buffer-shorthand t
        eshell-cmpl-dir-ignore "\\`\\(\\.\\.?\\|CVS\\|\\.svn\\|\\.git\\)/\\'")
  
  ;;;###autoload
  (eval-after-load 'esh-opt
    '(progn
       (require 'em-prompt)
       (require 'em-term)
       (require 'em-cmpl)
       (require 'em-rebind)
       (setenv "PAGER" "cat")
       (set-face-attribute 'eshell-prompt nil :foreground "turquoise1")
       (add-hook 'eshell-mode-hook ;; for some reason this needs to be a hook
                 '(lambda () (define-key eshell-mode-map "\C-a" 'eshell-bol)))
       (setq eshell-cmpl-cycle-completions nil)
  
       ;; TODO: submit these via M-x report-emacs-bug
       (add-to-list 'eshell-visual-commands "ssh")
       (add-to-list 'eshell-visual-commands "tail")
       (add-to-list 'eshell-command-completions-alist
                    '("gunzip" "gz\\'"))
       (add-to-list 'eshell-command-completions-alist
                    '("tar" "\\(\\.tar|\\.tgz\\|\\.tar\\.gz\\)\\'"))))
  
  ;; these two haven't made it upstream yet
  ;;;###autoload
  (when (not (functionp 'eshell/find))
    (defun eshell/find (dir &rest opts)
      (find-dired dir (mapconcat (lambda (arg)
                                   (if (get-text-property 0 'escaped arg)
                                       (concat "\"" arg "\"")
                                     arg))
                                 opts " "))))
  
  ;;;###autoload
  (when (not (functionp 'eshell/rgrep))
    (defun eshell/rgrep (&rest args)
      "Use Emacs grep facility instead of calling external grep."
      (eshell-grep "rgrep" args t)))
  
  (defface esk-eshell-error-prompt-face
    '((((class color) (background dark)) (:foreground "red" :bold t))
      (((class color) (background light)) (:foreground "red" :bold t)))
    "Face for nonzero prompt results"
    :group 'eshell-prompt)
  
  (add-hook 'eshell-after-prompt-hook
            (defun esk-eshell-exit-code-prompt-face ()
              (when (and eshell-last-command-status
                         (not (zerop eshell-last-command-status)))
                (let ((inhibit-read-only t))
                  (add-text-properties
                   (save-excursion (beginning-of-line) (point)) (point-max)
                   '(face esk-eshell-error-prompt-face))))))
  
  (defun ac-pcomplete ()
    ;; eshell uses `insert-and-inherit' to insert a \t if no completion
    ;; can be found, but this must not happen as auto-complete source
    (flet ((insert-and-inherit (&rest args)))
      ;; this code is stolen from `pcomplete' in pcomplete.el
      (let* (tramp-mode ;; do not automatically complete remote stuff
             (pcomplete-stub)
             (pcomplete-show-list t) ;; inhibit patterns like * being deleted
             pcomplete-seen pcomplete-norm-func
             pcomplete-args pcomplete-last pcomplete-index
             (pcomplete-autolist pcomplete-autolist)
             (pcomplete-suffix-list pcomplete-suffix-list)
             (candidates (pcomplete-completions))
             (beg (pcomplete-begin))
             ;; note, buffer text and completion argument may be
             ;; different because the buffer text may bet transformed
             ;; before being completed (e.g. variables like $HOME may be
             ;; expanded)
             (buftext (buffer-substring beg (point)))
             (arg (nth pcomplete-index pcomplete-args)))
        ;; we auto-complete only if the stub is non-empty and matches
        ;; the end of the buffer text
        (when (and (not (zerop (length pcomplete-stub)))
                   (or (string= pcomplete-stub ; Emacs 23
                                (substring buftext
                                           (max 0
                                                (- (length buftext)
                                                   (length pcomplete-stub)))))
                       (string= pcomplete-stub ; Emacs 24
                                (substring arg
                                           (max 0
                                                (- (length arg)
                                                   (length pcomplete-stub)))))))
          ;; Collect all possible completions for the stub. Note that
          ;; `candidates` may be a function, that's why we use
          ;; `all-completions`.
          (let* ((cnds (all-completions pcomplete-stub candidates))
                 (bnds (completion-boundaries pcomplete-stub
                                              candidates
                                              nil
                                              ""))
                 (skip (- (length pcomplete-stub) (car bnds))))
            ;; We replace the stub at the beginning of each candidate by
            ;; the real buffer content.
            (mapcar #'(lambda (cand) (concat buftext (substring cand skip)))
                    cnds))))))
  
  (defvar ac-source-pcomplete
    '((candidates . ac-pcomplete)))
  
  (add-hook 'eshell-mode-hook #'(lambda () (setq ac-sources '(ac-source-pcomplete))))
  (add-to-list 'ac-modes 'eshell-mode)
#+END_SRC
** icomplete
Incremental minibuffer completion
#+begin_src emacs-lisp
  (icomplete-mode 1)
  (setq icomplete-compute-delay 0)
#+end_src

** ispell
#+BEGIN_SRC emacs-lisp
  (setq ispell-personal-dictionary "~/.ispell-dict-personal")
#+END_SRC
** color-theme
#+begin_src emacs-lisp
  (color-theme-initialize)
  (color-theme-dark-laptop)     
#+end_src
** recentf
http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/

#+begin_src emacs-lisp
  (require 'recentf)
  
  ;; get rid of `find-file-read-only' and replace it with something
  ;; more useful.
  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
  
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)
  
  ;; enable recent files mode.
  (recentf-mode t)
  
  ;; 50 files ought to be enough.
  (setq recentf-max-saved-items 50)
  
  (add-hook 'eshell-preoutput-filter-functions
      'ansi-color-filter-apply)
#+end_src

** twittering-mode
#+begin_src emacs-lisp
  (setq twittering-icon-mode t)
  (setq twittering-timer-interval 600)
  (setq twittering-url-show-status nil)
  (add-hook 'twittering-edit-mode-hook 'turn-on-flyspell 'append)
  (add-hook 'twittering-mode-hook (lambda () (visual-line-mode 1)))
  (setq twittering-initial-timeline-spec-string
        '(":home"
          ":mentions"
          ":direct_messages"))
#+end_src

** bbdb
Address book
#+begin_src emacs-lisp
  (bbdb-initialize 'gnus 'message)
  ;; (bbdb-mua-auto-update-init 'gnus 'message)
  ;; Most of the following ripped from
  ;; http://emacs-fu.blogspot.com/2009/08/managing-e-mail-addresses-with-bbdb.html
  (setq
   bbdb-offer-save 1
   bbdb-phone-style 'nil
   bbdb-use-pop-up t ;; allow popups for addresses
   bbdb-electric-p t ;; be disposable with SPC
   bbdb-popup-target-lines 1 ;; very small
  
   bbdb-dwim-net-address-allow-redundancy t ;; always use full name
   bbdb-quiet-about-name-mismatches 2 ;; show name-mismatches 2 secs
  
   bbdb-north-american-phone-numbers-p nil ;; Make sure that telephone numbers are international
  
   bbdb-always-add-address t ;; add new addresses to existing contacts automatically
   bbdb-canonicalize-redundant-nets-p t ;; x@foo.bar.cx => x@bar.cx
  
   bbdb-completion-type nil ;; complete on anything
  
   bbdb-complete-name-allow-cycling t ;; cycle through matches
   ;; this only works partially
  
   bbdb-message-caching-enabled t ;; be fast
   bbdb-use-alternate-names t ;; use AKA
  
   bbdb-elided-display t ;; single-line addressesq
  
   ;; auto-create addresses from mail
   ;; bbdb/mail-auto-create-p 'bbdb-ignore-some-messages-hook
   ;; bbdb-ignore-some-messages-alist ;; don't ask about fake addresses
   ;; NOTE: there can be only one entry per header (such as To, From)
   ;; http://flex.ee.uec.ac.jp/texi/bbdb/bbdb_11.html
  
   ;;'(( "From" . "no.?reply\\|DAEMON\\|daemon\\|facebookmail\\|twitter")))
   bbdb/mail-auto-create-p nil)
#+end_src
** yasnippet
#+begin_src emacs-lisp
(require 'yasnippet)
(yas-global-mode 1)
#+end_src
** ido
#+begin_src emacs-lisp
  (require 'ido)
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (setq ido-execute-command-cache nil)
  (setq ido-create-new-buffer 'always)
#+end_src

** uniquify
Make buffer names unique, handy when opening files with similar names
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "|")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")
#+end_src

** windmove
Move between windows using shift-[arrow key]
#+begin_src emacs-lisp
(require 'windmove)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+end_src

** saveplace
Make sure I always come back to the same place in a file
http://groups.google.com/group/comp.emacs/browse_thread/thread/c5e4c18b77a18512

#+begin_src emacs-lisp
  (setq-default save-place t)
  ;; saveplace and org-mode do not play well together, reset the regexp to include
  ;; org and org_archive files
  (setq-default save-place-ignore-files-regexp "\\(?:COMMIT_EDITMSG\\|hg-editor-[[:alnum:]]+\\.txt\\|svn-commit\\.tmp\\|bzr_log\\.[[:alnum:]]+\\|.*\\.org\\|.*\\.org_archive\\)$")
  (require 'saveplace)
  
#+end_src

** tramp
#+begin_src emacs-lisp
(require 'tramp)
(setq tramp-default-method "ssh")
#+end_src

** ibuffer
List buffers in a dired-ish way
#+begin_src emacs-lisp
  (require 'ibuffer)
  (setq ibuffer-default-sorting-mode 'major-mode)
  (setq ibuffer-always-show-last-buffer t)
  (setq ibuffer-view-ibuffer t)
  (setq ibuffer-show-empty-filter-groups nil)
  
  ;; Set up buffer groups based on file and mode types
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Org" (mode . org-mode))
                 ("ERC" (mode . erc-mode))
                 ("Emacs Setup" (or
                                 (filename . "/.emacs_files/")
                                 (filename . "/.emacs_d/")
                                 (filename . "/emacs_d/")))
                 ("magit" (name . "magit"))
                 ("dired" (mode . dired-mode))
                 ("work projects" (filename . "/mozbuild/"))
                 ("home projects" (filename . "/git-projects/"))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))))))
  
  ;; Make sure we're always using our buffer groups
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src
** ansi-color
Turn on ansi in shells
#+begin_src emacs-lisp
(require 'ansi-color)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

** dired
#+begin_src emacs-lisp
  ;; dired modifications
  
  ;; taken from http://bitbucket.org/kcfelix/emacsd/src/tip/init.el
  (defun qdot/dired-init ()
    "Bunch of stuff to run for dired, either immediately or when it's
            loaded."
    (define-key dired-mode-map (kbd "C-s") 'dired-isearch-filenames-regexp)
    (define-key dired-mode-map (kbd "C-M-s") 'dired-isearch-filenames))
  
  ;; if dired's already loaded, then the keymap will be bound
  (if (boundp 'dired-mode-map)
      ;; we're good to go; just add our bindings
      (qdot/dired-init)
    ;; it's not loaded yet, so add our bindings to the load-hook
    (add-hook 'dired-load-hook 'qdot/dired-init))
  
  ;; Additions to dired
  ;; http://nflath.com/2009/07/dired/
  
  (require 'dired-x)
  (require 'wdired)
  (setq wdired-allow-to-change-permissions 'advanced)
  (define-key dired-mode-map                    (kbd "r")         'wdired-change-to-wdired-mode)
  
  ;; http://whattheemacsd.com//setup-dired.el-02.html
  (defun dired-back-to-top ()
    (interactive)
    (beginning-of-buffer)
    (dired-next-line (if dired-omit-mode 2 4)))
  
  (define-key dired-mode-map
    (vector 'remap 'beginning-of-buffer) 'dired-back-to-top)
  
  (defun dired-jump-to-bottom ()
    (interactive)
    (end-of-buffer)
    (dired-next-line -1))
  
  (define-key dired-mode-map
    (vector 'remap 'end-of-buffer) 'dired-jump-to-bottom)
#+end_src

** magit
git management in emacs
#+begin_src emacs-lisp
  ;; Turn on narrowing
  (put 'narrow-to-region 'disabled nil)
  (setq magit-completing-read-function
        'magit-ido-completing-read)
  
  (add-hook 'magit-log-edit-mode-hook 'turn-on-flyspell 'append)
  
  ;; Set up diffing faces, and always full screen magit
  (eval-after-load 'magit
    '(progn
       (set-face-foreground 'magit-diff-add "green1")
       (set-face-foreground 'magit-diff-del "red1")
       (set-face-background 'magit-diff-add "#004400")
       (set-face-background 'magit-diff-del "#440000")
       (set-face-background 'magit-item-highlight "#1f2727")
       ;; full screen magit-status
  
       (defadvice magit-status (around magit-fullscreen activate)
         (window-configuration-to-register :magit-fullscreen)
         ad-do-it
         (delete-other-windows))
       (defun magit-quit-session ()
         "Restores the previous window configuration and kills the magit buffer"
         (interactive)
         (kill-buffer)
         (jump-to-register :magit-fullscreen))
  
       (define-key magit-status-mode-map (kbd "q") 'magit-quit-session)))
  
  (global-set-key (kbd "M-g s") 'magit-status)
  
  ;; Don't require confirm to stage changes
  (setq magit-stage-all-confirm nil)
  
  ;; https://coderwall.com/p/s8agwq
  (eval-after-load "magit"
    '(mapc (apply-partially 'add-to-list 'magit-repo-dirs)
                 '("~/code/mozbuild/gecko-dev" "~/code/mozbuild/gaia")))
#+end_src
** easy-pg
gpg file auto query/loading
#+begin_src emacs-lisp
;; Turn on easy-pg
(require 'epa-file)
(epa-file-enable)
(setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+end_src
** mu4e
My mail client of choice.
*** mu4e variables/functions to be used across sessions
#+BEGIN_SRC emacs-lisp
  (when qdot/mail-p
    (require 'mu4e-vars)
    (add-hook 'mu4e-main-mode-hook (lambda () (require 'mu4e-unread-main)))
    (when macosx-p
      (setq mu4e-mu-binary "/opt/homebrew/bin/mu"))
    (setq mu4e-maildir "~/Mail") ;; top-level Maildir
    (setq mu4e-html2text-command "w3m -dump -T text/html")
    (setq mu4e-view-prefer-html t)
    (setq mu4e-use-fancy-chars t)
    (setq mu4e-hide-index-messages t)
    (setq mu4e-update-interval 300)
    (setq mu4e-attachment-dir  "~/Downloads")
    (when (fboundp 'imagemagick-register-types)
      (imagemagick-register-types))
    (setq mu4e-view-show-images t)
    (setq mu4e-view-show-addresses t)  
    (setq mail-user-agent 'mu4e-user-agent)
    (require 'org-mu4e)
  
    (defun qdot/mu4e-set-account ()
      "Set the account for composing a message."
      (interactive)
      (let* ((account
              (if mu4e-compose-parent-message
                  (let ((maildir (mu4e-message-field mu4e-compose-parent-message :maildir)))
                    (string-match "/\\(.*?\\)/" maildir)
                    (match-string 1 maildir))
                (completing-read (format "Compose with account: (%s) "
                                         (mapconcat #'(lambda (var) (car var)) qdot/mu4e-account-alist "/"))
                                 (mapcar #'(lambda (var) (car var)) qdot/mu4e-account-alist)
                                 nil t nil nil (caar qdot/mu4e-account-alist))))
             (account-vars (cdr (assoc account qdot/mu4e-account-alist))))
        (if account-vars
            (mapc #'(lambda (var)
                      (set (car var) (cadr var)))
                  account-vars)
          (error "No email account found"))))
  
    (add-hook 'mu4e-compose-pre-hook 'qdot/mu4e-set-account)
  
    (require 'gnus-dired)
    ;; make the `gnus-dired-mail-buffers' function also work on
    ;; message-mode derived modes, such as mu4e-compose-mode
    (defun gnus-dired-mail-buffers ()
      "Return a list of active message buffers."
      (let (buffers)
        (save-current-buffer
          (dolist (buffer (buffer-list t))
            (set-buffer buffer)
            (when (and (derived-mode-p 'message-mode)
                       (null message-sent-message-via))
              (push (buffer-name buffer) buffers))))
        (nreverse buffers)))
  
    (setq gnus-dired-mail-mode 'mu4e-user-agent)
    (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode)
  
    ;; Create a header action for marking as needs reply
    (defun qdot/mu4e-org-needs-reply (msg)
      (let* ((msgid   (or (plist-get msg :message-id) "<none>"))
             (msgfrom (car (mu4e-message-field msg :from)))
             link)
        ;; Manually concat the link because I suck at figuring out how org-mode
        ;; elisp works
        (setq link (concat "REPLY "
                           (format-time-string (cdr org-time-stamp-formats) (mu4e-message-field msg :date))
                           " [[mu4e:msgid:" msgid "][" (car msgfrom) " <" (cdr msgfrom) "> : "
                           (funcall org-mu4e-link-desc-func msg) "]]" ))
        (kill-new link)
        (org-capture nil "r")))
  
    (require 'mu4e-headers)
    (add-to-list 'mu4e-headers-actions '("org reply task" . qdot/mu4e-org-needs-reply) t)
  
    (require 'mu4e-contrib)
    (add-to-list 'mu4e-headers-actions '("mark all read" . mu4e-headers-mark-all-unread-read) t))
#+END_SRC
*** Personal setup
#+BEGIN_SRC emacs-lisp
  (when qdot/mail-p
    (setq mu4e-user-mail-address-list (list "kyle@nonpolynomial.com"
                                            "kyle@knot-theory.com"
                                            "qdot76367@gmail.com"
                                            "t-kylem@microsoft.com"
                                            "kmachulis@mozilla.com"
                                            "kyle@510systems.com"
                                            "kyle@kipr.org"
                                            "qdot@mozilla.com"
                                            "qdot@knot-theory.com"
                                            "qdot@nonpolynomial.com"
                                            "qdot@deathbots.com"
                                            "qdot@ia1hacking.com"
                                            "alex@mmorgy.com"
                                            "alexp@mmorgy.com"
                                            "isabelle@mmorgy.com"
                                            "qdot@mmorgy.com"
                                            "tips@mmorgy.com"
                                            "qdot@numberporn.com"
                                            "qdot@opendildonics.org"
                                            "kyle@openyou.org"
                                            "qdot@slashdong.org"
                                            "tips@slashdong.org"
                                            "mage@ou.edu"
                                            "mage@gothic.net"
                                            "mage@ionet.net"
                                            "mage@galstar.net"))
  
    ;; setup some handy shortcuts
    (setq mu4e-maildir-shortcuts
          '(("/nonpolynomial/INBOX"                 . ?i)
            ("/mozilla/INBOX"                       . ?m)
            ("/nonpolynomial/Mozilla.bugzilla"      . ?b)
            ("/nonpolynomial/MailArchive.Kelly"     . ?k)
            ("/nonpolynomial/MailArchive.Personal"  . ?p)
            ("/nonpolynomial/MailArchive.Receipts"  . ?r)
            ("/[Gmail].Sent Mail"                   . ?s)
            ("/[Gmail].Trash"                       . ?t)))
  
    (setq qdot/mu4e-account-alist
          '(("nonpolynomial"
             (mu4e-sent-folder "/nonpolynomial/[Gmail].Sent Mail")
             (mu4e-drafts-folder "/nonpolynomial/[Gmail].Drafts")
             (user-mail-address "kyle@nonpolynomial.com")
             (smtpmail-default-smtp-server "smtp.gmail.com")
             (smtpmail-local-domain "nonpolynomial.com")
             (smtpmail-smtp-server "smtp.gmail.com")
             (smtpmail-stream-type starttls)
             (smtpmail-smtp-service 587))
            ("mozilla"
             (mu4e-sent-folder "/mozilla/Sent")
             (mu4e-drafts-folder "/mozilla/Drafts")
             (user-mail-address "kmachulis@mozilla.com")
             (smtpmail-default-smtp-server "smtp.")
             (smtpmail-local-domain "mozilla.com")
             (smtpmail-smtp-server "smtp.gmail.com")
             (smtpmail-stream-type starttls)
             (smtpmail-smtp-service 587))))
  
    (add-to-list 'mu4e-bookmarks
                 '("maildir:/nonpolynomial/INBOX flag:unread" "Nonpolynomial Unread" ?n) t)
    (add-to-list 'mu4e-bookmarks
                 '("maildir:/mozilla/INBOX flag:unread" "Mozilla Unread" ?m) t))
#+END_SRC
*** Work setup
** smtpmail
#+begin_src emacs-lisp  
  ;; sending mail -- replace USERNAME with your gmail username
  ;; also, make sure the gnutls command line utils are installed
  ;; package 'gnutls-bin' in Debian/Ubuntu, 'gnutls' in Archlinux.
  (when qdot/mail-p
    (require 'smtpmail)
    (setq message-send-mail-function 'smtpmail-send-it
          starttls-use-gnutls t
          smtpmail-starttls-credentials
          '(("smtp.gmail.com" 587 nil nil))
          smtpmail-auth-credentials
          '(("smtp.gmail.com" 587 "kyle@nonpolynomial.com" nil))
          smtpmail-default-smtp-server "smtp.gmail.com"
          smtpmail-smtp-server "smtp.gmail.com"
          smtpmail-smtp-service 587
          smtpmail-debug-info t)
  
    (setq smtpmail-queue-mail  nil  ;; start in non-queuing mode
          smtpmail-queue-dir   "~/Mail/queue/cur")
  
    ;; msmtp setup via
    ;; http://ionrock.org/emacs-email-and-mu.html
  
    ;; sending mail
    (setq message-send-mail-function 'message-send-mail-with-sendmail
          sendmail-program "/usr/bin/msmtp")
  
    ;; Choose account label to feed msmtp -a option based on From header
    ;; in Message buffer; This function must be added to
    ;; message-send-mail-hook for on-the-fly change of From address before
    ;; sending message since message-send-mail-hook is processed right
    ;; before sending message.
    (defun choose-msmtp-account ()
      (if (message-mail-p)
          (save-excursion
            (let*
                ((from (save-restriction
                         (message-narrow-to-headers)
                         (message-fetch-field "from")))
                 (account
                  (cond
                   ((string-match "kmachulis@mozilla.com" from) "mozilla-mail")
                   ((string-match "kyle@nonpolynomial.com" from) "nplabs-mail"))))
              (setq message-sendmail-extra-arguments
                    (list "-C" "/home/qdot/.msmtprc"
                          "-a" account
                          (format "--passwordeval=gpg --use-agent --batch --quiet -d /home/qdot/.passwd/%s.gpg" account)))))))
    (setq message-sendmail-envelope-from 'header)
    (add-hook 'message-send-mail-hook 'choose-msmtp-account))
#+end_src
** message-mode
#+begin_src emacs-lisp
  ;; add Cc and Bcc headers to the message buffer
  (setq message-default-mail-headers "Cc: \nBcc: \n")
  (setq message-kill-buffer-on-exit t)
  (add-hook 'message-mode-hook 'turn-on-flyspell 'append)
  
#+end_src

** wg
*** Basic Config
#+begin_src emacs-lisp
  ;; Set the prefix key to tilde, what I normally use in screen
  (setq wg-prefix-key "`")
  ;; Turn off animations
  (setq wg-morph-on nil)
  ;; Turn off saving on exit
  (setq wg-emacs-exit-save-behavior nil)
  ;; Turn off reloading of workgroup file lists
  (setq wg-restore-associated-buffers nil)
  
  (setq wg-switch-to-first-workgroup-on-find-session-file nil)
#+end_src
*** uid-mismatch handling
#+BEGIN_SRC emacs-lisp
  ;; Due to some buffers having issues when reloading (erc), uids start
  ;; to mismatch which massively trips up workgroups. This is function
  ;; redefinition allows us to set the action when a mismatch happens.
  
  (defvar wg-error-on-uid-mismatch t
    "Whether or not we should throw an error when buffer uids
  mismatch, or just throw a message and reset them to what we think
  they should be.")
  
  (setq wg-error-on-uid-mismatch nil)
  
  (defun wg-set-buffer-uid-or-error (uid &optional buffer)
    "Set BUFFER's buffer local value of `wg-buffer-uid' to UID.
  If BUFFER already has a buffer local value of `wg-buffer-uid',
  and it's not equal to UID, error."
    (if wg-buffer-uid
        (if (string= wg-buffer-uid uid) uid
          (if wg-error-on-uid-mismatch
              (error "uids don't match %S and %S for %S" 
                     uid wg-buffer-uid
                     (if buffer (buffer-name buffer) 
                       (buffer-name (current-buffer))))
            (setq wg-buffer-uid uid)
            (message "uids don't match %S and %S for %S" 
                     uid wg-buffer-uid
                     (if buffer (buffer-name buffer) 
                       (buffer-name (current-buffer))))))
      (setq wg-buffer-uid uid)))
#+END_SRC
*** Personal usage setup function
#+BEGIN_SRC emacs-lisp
  (defun qdot/personal-wg-setup ()
    ;;(workgroups-mode 1)
  
    (defun qdot/wg-filter-buffer-list-by-not-major-mode (major-mode buffer-list)
      "Return only those buffers in BUFFER-LIST in major-mode MAJOR-MODE."
      (remove-if (lambda (mm) (eq mm major-mode))
                 buffer-list :key 'wg-buffer-major-mode))
  
    (defun qdot/wg-filter-buffer-list-by-erc-query (server buffer-list)
      "Return only those buffers in BUFFER-LIST in major-mode MAJOR-MODE."
      (remove-if-not (lambda (buf) (erc-query-buffer-p (get-buffer buf)))
                     buffer-list :key 'buffer-name))
  
    (defun qdot/wg-buffer-list-filter-not-irc (workgroup buffer-list)
      "Return only those buffers in BUFFER-LIST in `erc-mode'."
      (qdot/wg-filter-buffer-list-by-not-major-mode 'erc-mode buffer-list))
  
    (defun qdot/wg-buffer-list-filter-associated-not-irc (workgroup buffer-list)
      "Return only those buffers in BUFFER-LIST in `erc-mode'."
      (qdot/wg-filter-buffer-list-by-not-major-mode
       'erc-mode (wg-buffer-list-filter-associated workgroup buffer-list)))
  
  
    (defun qdot/wg-buffer-list-filter-erc-channel (workgroup buffer-list)
      "Return only those buffers in BUFFER-LIST in `erc-mode'."
      (wg-filter-buffer-list-by-regexp 
       "^#" (wg-filter-buffer-list-by-major-mode 'erc-mode buffer-list)))
  
    (defun qdot/wg-buffer-list-filter-erc-query (workgroup buffer-list)
      "Return only those buffers in BUFFER-LIST in `erc-mode'."
      (qdot/wg-filter-buffer-list-by-erc-query 'erc-mode buffer-list))
  
    (add-to-list
     'wg-buffer-list-filter-definitions
     '(qdot/erc-query "qdot/erc-query" qdot/wg-buffer-list-filter-erc-query))
    (add-to-list
     'wg-buffer-list-filter-definitions
     '(qdot/erc-irc "qdot/erc-channel" qdot/wg-buffer-list-filter-erc-channel))
    (add-to-list
     'wg-buffer-list-filter-definitions
     '(qdot/not-irc "qdot/not-irc" qdot/wg-buffer-list-filter-not-irc))
  
    (add-to-list
     'wg-buffer-list-filter-definitions
     '(qdot/associated-not-irc "qdot/associated-not-irc" 
                               qdot/wg-buffer-list-filter-associated-not-irc))
  
    (defun qdot/wg-set-buffer-lists ()
      (wg-set-workgroup-parameter (wg-get-workgroup "scratch")
                                  'wg-buffer-list-filter-order-alist 
                                  '((qdot/not-irc all)))
      (wg-set-workgroup-parameter (wg-get-workgroup "irc") 
                                  'wg-buffer-list-filter-order-alist 
                                  '((default qdot/erc-irc all)))
      (wg-set-workgroup-parameter (wg-get-workgroup "bitlbee") 
                                  'wg-buffer-list-filter-order-alist 
                                  '((default qdot/erc-query all))))
  
    (defun qdot/wg-load ()
      (interactive)
      (wg-find-session-file (concat qdot/emacs-conf-dir "workgroups/linux-wg.el"))
      (qdot/wg-set-buffer-lists)))
  
  ;; (wg-filter-buffer-list-by-major-mode 'erc-mode (buffer-list))
  ;; (wg-filter-buffer-list-by-not-major-mode 'erc-mode (buffer-list))  
#+end_src
** sauron
*** Variables
#+begin_src emacs-lisp
  (setq sauron-separate-frame nil
        sauron-modules '(sauron-erc
                         sauron-org
                         sauron-notifications
                         sauron-twittering)
        sauron-max-line-length 200
        ;; 60 was a little long, and there's a lot of times I switch away quickly after
        ;; replying.
        sauron-nick-insensitivity 5

        ;; you probably want to add your own nickname to the these patterns
        sauron-watch-patterns
        '("qDot_" "qDot" "subgirl" "bokeh" "xiuv")

        sauron-watch-nicks
        '("qDot_" "qDot" "aim-xiuvx" "aim-bokehcat" "aim-subgirl13"))

  ;; external module to handle special xmonad notifications setup
  (require 'qdot-sauron-notifications)
#+end_src
*** Monkeypatching IM status message
#+BEGIN_SRC emacs-lisp
  (defun qdot/monkey-patch-sr ()
    (interactive)
    ;; Monkeypatching sauron's ERC hook until I write a msg string formatter for it
    (defun sr-erc-PRIVMSG-hook-func (proc parsed)
      "Hook function, to be called for erc-matched-hook."
      (let* ( (me      (erc-current-nick))
              (sender  (car (erc-parse-user (erc-response.sender parsed))))
              (channel (car (erc-response.command-args parsed)))
              (msg     (sr-erc-msg-clean (erc-response.contents parsed)))
              (nw      (symbol-name (erc-network)))
              (for-me  (string= me channel))
              (prio
               (cond
                ((string= sender "root") 2)  ;; e.g. bitlbee stuff; low-prio
                (for-me                  3)  ;; private msg for me => prio 4
                ((string-match me msg)   3)  ;; I'm mentioned => prio 3
                (t       2)))  ;; default
              (target (if (buffer-live-p (get-buffer channel))
                          (with-current-buffer (get-buffer channel)
                            (point-marker)))))
        (sauron-add-event
         'erc
         prio
         (concat
          (propertize sender 'face 'sauron-highlight1-face) "@"
          (propertize channel 'face 'sauron-highlight2-face) " on "
          (propertize nw 'face 'sauron-highlight2-face)
          (if (string-match "#" channel)
              (propertize " msg" 'face 'sauron-highlight1-face)
            (propertize " privmsg" 'face 'sauron-highlight1-face)))
         (lexical-let* ((target-mark target)
                        (target-buf (if for-me sender channel)))
           (lambda ()
             (sauron-switch-to-marker-or-buffer (or target-mark target-buf))))
         `( :event   privmsg
                     :sender ,sender
                     :me     ,me
                     :channel ,channel
                     :msg    ,msg)))
      nil))
#+end_src

** org-mode
*** org modules
#+BEGIN_SRC emacs-lisp
  (require 'org-checklist)
  (require 'org-screen)
  (require 'org-protocol)
  (require 'org-mobile)
  (require 'org-habit)
  (require 'org-bh)

  (add-to-list 'org-export-backends 'md)
  (setq org-modules     (quote (org-bibtex
                                org-crypt
                                org-gnus
                                org-id
                                org-info
                                org-jsinfo
                                org-habit
                                org-inlinetask
                                org-irc
                                org-protocol
                                org-w3m)))

  ;; This comes out of elisp/next-spec-day.el. Should see about getting this into
  ;; org-contrib or something.
  (require 'org-next-spec-day)
#+END_SRC
*** org variables
#+BEGIN_SRC emacs-lisp  
  (setq
   ;; global STYLE property values for completion
   org-global-properties (quote (("STYLE_ALL" . "habit")))
   ;; Use ~/emacs_org for storing files. Usually symlinked to Dropbox
   org-directory "~/emacs_org"
   
   ;; By default, at least timestamp done states
   org-log-done t
   
   ;; Keep drawer for logs too
   org-drawers (quote ("PROPERTIES" "LOGBOOK"))
   
   ;; We deal with stuck projects ourselves
   org-stuck-projects (quote ("" nil nil ""))
   
   ;; Save clock data and state changes and notes in the LOGBOOK drawer
   org-log-into-drawer t
   org-clock-into-drawer t
   
   ;; Start indented
   org-startup-indented t
   
   ;; Hide blank lines inside folded nodes
   org-cycle-separator-lines 0
   
   ;; Show notes in a task first
   org-reverse-note-order nil
   
   ;; Just show one day on the agenda
   org-agenda-ndays 1
   
   ;; Not sure, think I copied it from norang
   org-indent-indentation-per-level 2
   
   ;; Archive to the file name, assume we're not doubling up names across projects
   org-archive-location "~/emacs_org/archives/%s_archive::"
   
   ;; Don't really use priorities, turn them off
   org-enable-priority-commands nil
   
   ;; Do single letter confirm of links
   org-confirm-elisp-link-function 'y-or-n-p
   
   ;; Use IDO for target completion
   org-completion-use-ido t
   
   ;; Targets include this file and any file contributing to the agenda - up to 9 levels deep
   org-refile-targets (quote ((nil :maxlevel . 9) (org-agenda-files :maxlevel . 9)))
   
   ;; Use outline paths, but let IDO handle things
   org-refile-use-outline-path (quote file)
   
   ;; Allow refile to create parent tasks with confirmation
   org-refile-allow-creating-parent-nodes (quote confirm)
   
   ;; IDO now handles header finding
   org-outline-path-complete-in-steps nil
   
   ;; Yes it's long... but more is better ;
   org-clock-history-length 35
   
   ;; Resume clocking task on clock-in if the clock is open
   org-clock-in-resume t
   
   ;; Save clock data and notes in the LOGBOOK drawer
   org-clock-into-drawer t
   
   ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
   org-clock-out-remove-zero-time-clocks t
   
   ;; Don't clock out when moving task to a done state
   org-clock-out-when-done nil
   
   ;; Save the running clock and all clock history when exiting Emacs, load it on startup
   org-clock-persist t
   
   ;; Don't use priorities and accidentally set them all the time, so just turn them off.
   org-enable-priority-commands nil
   
   ;; Don't use super/subscript, makes exports weird.
   org-use-sub-superscripts nil
   
   ;; The habit graph display column in the agenda
   org-habit-graph-column 50
   
   ;; warn 15 min in advance
   appt-message-warning-time 15
   
   ;; warn every 5 minutes
   appt-display-interval 5
   
   ;; show in the modeline
   appt-display-mode-line t
   
   ;; use our func
   appt-display-format 'nil
   
   ;; use speed commands
   org-use-speed-commands t
   
   ;; I like links being active ret
   org-return-follows-link t
   
   ;; Make lists cycle whether they're nodes or plain
   org-cycle-include-plain-lists t
   
   ;; Fontify org-src blocks like their language mode
   org-src-fontify-natively t
   
   ;; Turn on sticky agendas so we don't have to regenerate them
   org-agenda-sticky t
   
   ;; If there's a region, do whatever it is I'm trying to do to ALL headlines in
   ;; region
   org-loop-over-headlines-in-active-region t
   
   ;; This seemed like a good idea to have at t at first, but now it's driving me
   ;; crazy.
   org-special-ctrl-a/e nil
   
   org-special-ctrl-k t
   org-yank-adjusted-subtrees t
   
   org-align-all-tags t
   
   org-startup-folded t
   
   ;; Don't lock to the week/month, and always show ahead 7 days unless told otherwise
   org-agenda-start-on-weekday nil
   org-agenda-ndays 7
   
   ;; multiple pass pdf generation
   org-latex-to-pdf-process '("xelatex -interaction nonstopmode %f"
                              "xelatex -interaction nonstopmode %f")
   
   org-agenda-files (append
                     (file-expand-wildcards "~/emacs_org/*.org"))
   
   org-catch-invisible-edits 'error
   
   ;; No blank lines before headings
   org-blank-before-new-entry (quote ((heading)
                                      (plain-list-item . auto)))
   org-link-abbrev-alist
   '(("bugzilla"  . "https://bugzilla.mozilla.org/show_bug.cgi?id="))
  
   org-use-fast-todo-selection t
  
   org-treat-S-cursor-todo-selection-as-state-change nil
   ;; For tag searches ignore tasks with scheduled and deadline dates
   org-agenda-tags-todo-honor-ignore-options t)
  
#+end_src
*** Hooks
#+BEGIN_SRC emacs-lisp
  ;; flyspell mode for spell checking everywhere
  (add-hook 'org-mode-hook 'turn-on-flyspell 'append)
  
  (add-hook 'org-mode-hook (lambda () (org-indent-mode t)))
  
  ;; Disable C-c [ and C-c ] in org-mode
  (add-hook 'org-mode-hook
            (lambda ()
              ;; Undefine C-c [ and C-c ] since this breaks my
              ;; org-agenda files when directories are include It
              ;; expands the files in the directories individually
              (org-defkey org-mode-map "\C-c["    'undefined)
              (org-defkey org-mode-map "\C-c]"    'undefined))
            'append)

  ;; Always hilight the current agenda line
  (add-hook 'org-agenda-mode-hook
            '(lambda () (hl-line-mode 1))
            'append)
#+end_src
*** Clocking
#+BEGIN_SRC emacs-lisp
  ;; Resume clocking tasks when emacs is restarted
  (org-clock-persistence-insinuate)
  (setq bh/organization-task-id "6ef1b5e8-2a71-4aeb-8051-a2c22ba50665")
  (setq
   ;; Show lot of clocking history so it's easy to pick items off the C-F11 list
   org-clock-history-length 23
   ;; Resume clocking task on clock-in if the clock is open
   org-clock-in-resume t
   ;; Change tasks to NEXT when clocking in
   org-clock-in-switch-to-state 'bh/clock-in-to-next
   ;; Separate drawers for clocking and logs
   org-drawers (quote ("PROPERTIES" "LOGBOOK"))
   ;; Save clock data and state changes and notes in the LOGBOOK drawer
   org-clock-into-drawer t
   ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
   org-clock-out-remove-zero-time-clocks t
   ;; Clock out when moving task to a done state
   org-clock-out-when-done t
   ;; Save the running clock and all clock history when exiting Emacs, load it on startup
   org-clock-persist t
   ;; Do not prompt to resume an active clock
   org-clock-persist-query-resume nil
   ;; Enable auto clock resolution for finding open clocks
   org-clock-auto-clock-resolution (quote when-no-clock-is-running)
   ;; Include current clocking task in clock reports
   org-clock-report-include-clocking-task t)
#+END_SRC
*** Todo flow setup
#+BEGIN_SRC emacs-lisp
  ;; Straight up copied from norang now
  (setq org-todo-keywords (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d)")
                                  (sequence "WAITING(w@/!)" "HOLD(h!/!)" "|" "CANCELLED(c@/!)"))))
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("CANCELLED" . t))
                ("WAITING" ("WAITING" . t))
                ("HOLD" ("WAITING" . t) ("HOLD" . t))
                (done ("WAITING") ("HOLD"))
                ("TODO" ("WAITING") ("CANCELLED") ("HOLD"))
                ("NEXT" ("WAITING") ("CANCELLED") ("HOLD"))
                ("DONE" ("WAITING") ("CANCELLED") ("HOLD")))))
#+END_SRC
*** Key bindings
#+BEGIN_SRC emacs-lisp
  ;; I use C-M-r to start org-remember
  (global-set-key (kbd "C-M-R") 'org-capture)
  ;; Most of this ripped from http://doc.norang.ca/org-mode.html
  (global-set-key "\C-cl" 'org-store-link)
  (global-set-key "\C-ca" 'org-agenda)
  (global-set-key "\C-cb" 'org-iswitchb)
#+END_SRC
*** Speed key bindings
#+BEGIN_SRC emacs-lisp
  (setq org-speed-commands-user (quote (("S" . widen))))
#+END_SRC
*** Capture
#+BEGIN_SRC emacs-lisp
  ;; Once again, stolen from norang, except for the contacts one, which
  ;; was taken from the org-mode list.
  (setq org-capture-templates
        (quote
         (("t" "todo" entry (file "~/emacs_org/refile.org")
           "* TODO %?\n%u\n%a\n" :clock-in t :clock-resume t)
          ("n" "note" entry (file "~/emacs_org/notes.org")
           "* %? :NOTE:\n%u\n%a" :clock-in t :clock-resume t)
          ("r" "mu4e email reply" entry (file "~/emacs_org/email.org")
           "* %c" :immediate-finish t))))
#+END_SRC
*** Agenda
#+BEGIN_SRC emacs-lisp
  ;; Personal agenda modes
  (setq qdot/org-auto-exclude-tags '("hold" "habits"))
  (setq org-agenda-custom-commands
        (quote (("h" "Tasks for home" tags-todo "+HOME-someday" nil)
                ("5" "Tasks for work" tags-todo "+WORK-someday" nil)
                ("p" "Tasks for personal projects" tags-todo "+PROJECTS-someday" nil)
                ("X" agenda ""
                 (;;(org-agenda-prefix-format " [ ] ")
                  (org-agenda-with-colors nil)
                  (org-agenda-remove-tags t))
                 ("~/emacs_org/agenda.txt"))
                ("w" agenda "Week with events and no daily/chores"
                  ((org-agenda-ndays 14)
                   (org-agenda-filter-preset '("-daily"))))
                (" " "Agenda"
                 ((agenda "" nil)
                  (tags "REFILE"
                        ((org-agenda-overriding-header "Tasks to Refile")
                         (org-tags-match-list-sublevels nil)))
                  (tags "email"
                        ((org-agenda-overriding-header "Emails")
                         (org-tags-match-list-sublevels nil)
                         (org-agenda-skip-function '(org-agenda-skip-entry-if 'todo '("SENT" "CANCELLED")))))
                  (tags-todo "-CANCELLED/!"
                             ((org-agenda-overriding-header "Stuck Projects")
                              (org-agenda-skip-function 'bh/skip-non-stuck-projects)
                              (org-agenda-sorting-strategy
                               '(priority-down category-keep))))
                  (tags-todo "-HOLD-CANCELLED/!"
                             ((org-agenda-overriding-header "Projects")
                              (org-agenda-skip-function 'bh/skip-non-projects)
                              (org-agenda-sorting-strategy
                               '(priority-down category-keep))))
                  (tags-todo "-CANCELLED/!NEXT"
                             ((org-agenda-overriding-header "Project Next Tasks")
                              (org-agenda-skip-function 'bh/skip-projects-and-habits-and-single-tasks)
                              (org-tags-match-list-sublevels t)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(priority-down todo-state-down effort-up category-keep))))
                  (tags-todo "-REFILE-CANCELLED-WAITING-EVENT/!"
                             ((org-agenda-overriding-header (if (marker-buffer org-agenda-restrict-begin) "Project Subtasks" "Standalone Tasks"))
                              (org-agenda-skip-function 'bh/skip-project-tasks-maybe)
                              (org-agenda-todo-ignore-scheduled bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-deadlines bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-todo-ignore-with-date bh/hide-scheduled-and-waiting-next-tasks)
                              (org-agenda-sorting-strategy
                               '(category-keep))))
                  (tags-todo "-CANCELLED+WAITING/!"
                             ((org-agenda-overriding-header "Waiting and Postponed Tasks")
                              (org-agenda-skip-function 'bh/skip-stuck-projects)
                              (org-tags-match-list-sublevels nil)
                              (org-agenda-todo-ignore-scheduled 'future)
                              (org-agenda-todo-ignore-deadlines 'future)))
                  nil)))))
#+END_SRC
*** Appointment warning bindings
#+BEGIN_SRC emacs-lisp
  ;; Org mode notifications via aptp
  ;; the appointment notification facility
  (appt-activate 1)              ;; active appt (appointment notification)
  (display-time)                 ;; time display is required for this...
  
  ;; update appt each time agenda opened
  (add-hook 'org-finalize-agenda-hook 'org-agenda-to-appt)
#+END_SRC
*** Functions
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;; http://kanis.fr/blog-emacs.html#%20Diary%20block%20without%20week%2Dend
  ;; %%(diary-block-no-week-end 15 9 2010 30 10 2010) block without week-end
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  (defun qdot/diary-block-no-week-end (m1 d1 y1 m2 d2 y2 &optional mark)
    "Block diary entry.
   Entry applies if date is between two dates and not in the
   weekend."
    (let ((date1 (calendar-absolute-from-gregorian
                  (diary-make-date m1 d1 y1)))
          (date2 (calendar-absolute-from-gregorian
                  (diary-make-date m2 d2 y2)))
          (day (calendar-day-of-week date))
          (d (calendar-absolute-from-gregorian date)))
      (and (<= date1 d) (<= d date2) (not (= day 6)) (not (= day 0))
           (cons mark entry))))
  
#+END_SRC
*** Faces
#+BEGIN_SRC emacs-lisp
  ;; The following custom-set-faces create the highlights
  (custom-set-faces
   '(org-mode-line-clock ((t (:background "grey75" :foreground "red" :box (:line-width -1 :style released-button)))) t))

  ;; Sasha Chua's org done faces
  ;; http://sachachua.com/blog/2012/12/emacs-strike-through-headlines-for-done-tasks-in-org/
  (setq org-fontify-done-headline t)
  (custom-set-faces
   '(org-done ((t (:foreground "PaleGreen"
                               :weight normal :strike-through t))))
   '(org-headline-done
     ((((class color) (min-colors 16) (background dark))
       (:foreground "LightSalmon" :strike-through t)))))
  
  ;; Set org babel backgrounds so we get nice blocks
  (set-face-background 'org-block-begin-line "#333")
  (set-face-background 'org-block-end-line "#333")
  (set-face-background 'org-block-background "#222")
#+END_SRC
*** Mobile Org
#+BEGIN_SRC emacs-lisp
  (setq org-mobile-inbox-for-pull "~/emacs_org/tasks.org")
  (setq org-mobile-directory "~/Dropbox/MobileOrg")
  (setq org-mobile-files '("~/emacs_org/personal/events.org"))
  (setq org-mobile-agendas '("w"))
#+END_SRC
*** Disable org agenda window resizing
#+BEGIN_SRC emacs-lisp
  (defvar org-agenda-no-resize nil
    "When non-nil, don't let org-mode resize windows for you")
  
  (setq org-agenda-no-resize t)
  
  (defadvice qdot/org-fit-agenda-window (around org-fit-agenda-window-select)
    "Will not let org-fit-agenda-window resize if
   org-agenda-no-resize is non-nil"
    (when (not org-agenda-no-resize)
      ad-do-it))
#+END_SRC
*** Habit reloading
#+BEGIN_SRC emacs-lisp
  ;; Turn habits on at 6am every morning
  (run-at-time "06:00" 86400 '(lambda () (setq org-habit-show-habits t)))
#+END_SRC
*** Refile settings
#+BEGIN_SRC emacs-lisp
  ;; Taken from http://doc.norang.ca/org-mode.html
  ;; Refile settings
  ;; Exclude DONE state tasks from refile targets
  (defun qdot/verify-refile-target ()
    "Exclude todo keywords with a done state from refile targets"
    (not (member (nth 2 (org-heading-components)) org-done-keywords)))
  
  (setq org-refile-target-verify-function 'qdot/verify-refile-target)
#+END_SRC
** erc-mode
*** Module and variable setup
#+begin_src emacs-lisp
  (require 'erc)
  (require 'erc-fill)
  (require 'erc-ring)
  (require 'erc-match)
  (require 'erc-nicklist)
  (require 'erc-highlight-nicknames)
  (add-to-list 'erc-modules 'highlight-nicknames)
  (add-to-list 'erc-modules 'match)
  (erc-update-modules)
  (setq erc-timestamp-only-if-changed-flag nil
        erc-timestamp-format "[%H:%M] "
        erc-fill-prefix "      "
        erc-max-buffer-size 50000
        erc-truncate-buffer-on-save t
        erc-interpret-mirc-color nil
        erc-insert-timestamp-function 'erc-insert-timestamp-left
        erc-kill-queries-on-quit nil
        erc-auto-query 'bury
        erc-keywords nil
        erc-button-url-regexp "\\([-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]+\\.\\)+[-a-zA-Z0-9_=!?#$@~`%&*+\\/:;,]*[-a-zA-Z0-9\\/]"
        erc-fill-function 'erc-fill-static
        erc-fill-static-center 0
        ;; Don't track common events
        erc-track-exclude-types '("JOIN" "NICK" "PART" "QUIT" "MODE"
                                  "324" "329" "332" "333" "353" "477")
        erc-current-nick-highlight-type 'nick
        erc-track-use-faces t
        erc-track-faces-priority-list '(erc-current-nick-face erc-keyword-face)
        erc-track-priority-faces-only 'all)
  
  (defun qdot/erc-mode-hook ()
    ;; Don't really need paren matching when I'm trying to chat
    (setq blink-matching-paren nil)
    ;; ERC should only pop comp buffers if REALLY needed
    (setq completion-auto-help 'lazy))
  
  (add-hook 'erc-mode-hook 'qdot/erc-mode-hook)
  
  (setq erc-hide-list '("PART" "JOIN" "QUIT" "NICK"))
  
  (add-hook 'erc-insert-post-hook
            'erc-truncate-buffer)
  
#+END_SRC
*** Fill column resetting
#+BEGIN_SRC emacs-lisp
  (make-variable-buffer-local 'erc-fill-column)
  (defun qdot/erc-set-fill-columns ()
    (interactive)
    (save-excursion
      (walk-windows
       (lambda (w)
         (let ((buffer (window-buffer w)))
           (set-buffer buffer)
           (when (eq major-mode 'erc-mode)
             (message "Window size: %d" (window-width w))
             (setq erc-fill-column (- (window-width w) 2))))))))
  
  ;;(setq window-configuration-change-hook (cddr window-configuration-change-hook))
  
  ;;(add-hook 'window-configuration-change-hook 'qdot/erc-set-fill-columns)
#+END_SRC
*** Make join/part showing buffer local
Only show joins/hides/quits for channels we specify in qdot/erc-event-channels
#+BEGIN_SRC emacs-lisp
  (defvar qdot/erc-status-allow-list nil
    "alist of channels and the event messages to show for them.")
  
  (setq qdot/erc-status-allow-list
        '(("&bitlbee" . ("PART" "JOIN" "MODE" "NICK" "QUIT"))
          ("znc-bitlbee" . ("PART" "JOIN" "MODE" "NICK" "QUIT"))))
  
  (defadvice erc-hide-current-message-p (around qdot/erc-hide-per-buffer-advice last (parsed) activate)
    "Addition to hide message predicate to check for channel
  specific or network specific join/part showing. PART/JOIN/MODE
  messages can be parsed per channel. NICK/QUIT are parsed per
  network."
    (let* ((command (erc-response.command parsed))
           (command-args (erc-response.command-args parsed))
           (sender (car (erc-parse-user (erc-response.sender parsed))))
           (channel (if (member command '("PART" "JOIN" "MODE"))
                         (car command-args)
                       (buffer-name (current-buffer)))))
          (if (and (assoc channel qdot/erc-status-allow-list)
                   (member command (assoc channel qdot/erc-status-allow-list)))
              nil
            ad-do-it)))
#+END_SRC
*** ZNC Connection Setup
#+BEGIN_SRC emacs-lisp
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  ;;
  ;; ZNC IRC Bouncer Setup
  ;;
  ;; I use the ZNC IRC bouncer to keep IRC connected, kinda like screen, except
  ;; far more complicated and only useful for one thing. Yay!
  ;;
  ;; ZNC divides up networks to be one per account, so we have to start once ERC
  ;; instance per network we want to connect to.
  ;;
  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
  
  (defvar qdot/erc-znc-nick "qdot")
  (defvar qdot/erc-znc-password "doesnotmatter")
  (defvar qdot/erc-znc-networks '(("personal" . ("freenode"))
                                  ("work" . ("mozilla"))))
  (defvar qdot/erc-znc-remote-server "localhost")
  (defvar qdot/erc-znc-port 9999)
  
  (defun qdot/erc-znc-connect (network)
    (erc :server qdot/erc-znc-remote-server
         :port qdot/erc-znc-port
         :nick (format "%s/%s" qdot/erc-znc-nick network)
         :full-name "qdot"
         :password (format "%s/%s:%s" qdot/erc-znc-nick network qdot/erc-znc-password)))
  
  (defun qdot/erc-znc-rename-server-buffer ()
    (interactive)
    (save-excursion
      (let ((network-name (symbol-name (erc-network))))
        (set-buffer (erc-server-buffer))
        (rename-buffer (concat "znc-" (downcase network-name)))
        (message (format "Renamed buffer to %s" network-name))))
    nil)
  
  (defun qdot/erc-znc-initialize (server nick)
    ;; Prepend all ZNC buffers with znc-
    (qdot/erc-znc-rename-server-buffer))
  
  (add-hook 'erc-after-connect 'qdot/erc-znc-initialize)
  
  (defun qdot/erc-znc-start (type)
    (interactive "MNetwork: ")
    (mapcar 'qdot/erc-znc-connect (cdr (assoc type qdot/erc-znc-networks))))
  
  (defun qdot/bitlbee-connect ()
    (interactive)
    (qdot/erc-znc-connect "bitlbee"))
  
#+END_SRC
*** defadvice buffer clearing
#+BEGIN_SRC emacs-lisp
  (defun qdot/clear-irc-buffer ()
    "If the current buffer is and ERC buffer, clear all text out of
  it.
  
  This function exists due to the fact that calling /CLEAR only
  recenters the buffer so that prior history cannot be seen.
  "
    (interactive)
    (when (member (current-buffer) (erc-buffer-list))
      (erc-truncate-buffer-to-size 0)))
  
  (defadvice erc-cmd-CLEAR (before qdot/erc-actually-clear last () activate)
    (qdot/clear-irc-buffer))
#+END_SRC
*** Kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun qdot/erc-kill-all-channel-buffers ()
    (interactive)
    (dolist (channel (erc-buffer-list))
      (when (string-match-p "#" (buffer-name channel))
        (save-excursion
          (set-buffer channel)
          (kill-buffer)))))
  
  ;; Walk all of the server buffers first
  ;; Close those first, which autodetaches us from channels
  ;; Then go back through and close everything
  
  (defun qdot/kill-erc-buffers (bitlbee)
    (mapcar
     (lambda (arg)
       (when (and (erc-server-buffer-p arg)
                  (if bitlbee
                      (string-match (buffer-name arg) "znc-bitlbee")
                    (not (string-match (buffer-name arg) "znc-bitlbee"))))
         (save-excursion
           (set-buffer arg)
           (erc-quit-server "Wheee.")
           (if (get-buffer-process arg)
               (delete-process (get-buffer-process arg)))
           (kill-buffer))))
     (buffer-list)))
  
  (defun qdot/kill-irc ()
    (interactive)
    (qdot/kill-erc-buffers nil))
  
  (defun qdot/kill-bitlbee ()
    (interactive)
    (qdot/kill-erc-buffers t))
  
  (add-hook 'kill-emacs-hook 'qdot/kill-irc)
  (add-hook 'kill-emacs-hook 'qdot/kill-bitlbee)
  
  (defalias 'qdot/kill-erc 'qdot/kill-irc)
#+END_SRC  
** smartparens
#+BEGIN_SRC emacs-lisp
  (require 'smartparens-config)
  (smartparens-global-mode t)
  ;; I start words with ' a lot when I chat apparently
  (sp-local-pair 'erc-mode "'" nil :actions nil)
#+END_SRC
** prog-mode
#+begin_src emacs-lisp
  ;; Set defaults we expect
  (setq-default c-basic-offset 2)
  (setq-default py-indent-offset 2)
  (setq-default indent-tabs-mode nil)
  (setq-default tab-width 2)
  (setq linum-format "%4d")
  
  (defun qdot/programming-mode-hook ()
    ;; No tabs. Or wire hangers.
    (set-fill-column 80)
  
    (add-to-list 'ac-sources 'ac-source-yasnippet)
    (setq whitespace-line-column 80) ;; limit line length
    (setq whitespace-style '(face lines-tail))
    (setq show-trailing-whitespace t))
  
  (add-hook 'prog-mode-hook 'qdot/programming-mode-hook)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode)
  (add-hook 'prog-mode-hook 'show-smartparens-mode)
  (add-hook 'prog-mode-hook 'linum-mode)
#+end_src
** ielm
#+BEGIN_SRC emacs-lisp
  (defun ielm-auto-complete ()
    "Enables `auto-complete' support in \\[ielm]."
    (setq ac-sources '(ac-source-functions
                       ac-source-variables
                       ac-source-features
                       ac-source-symbols
                       ac-source-words-in-same-mode-buffers))
    (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
    (auto-complete-mode 1))
  (add-hook 'ielm-mode-hook 'ielm-auto-complete)
#+end_src

** flycheck
Using flycheck instead of flymake
#+begin_src emacs-lisp
  (require 'flycheck)
  (add-hook 'after-init-hook #'global-flycheck-mode)
  
  (flycheck-define-checker javascript-gjshint
    "Google's Closure Linter for JS
  
  See URL `https://developers.google.com/closure/utilities/docs/linter_howto`"
    :command ("gjslint" source-inplace)
    :error-patterns
    ((error line-start "Line " line ", E:" (zero-or-more not-newline) ": "
            (message) line-end))
    :modes (js-mode js2-mode js3-mode))
#+end_src
** haskell-mode
#+begin_src emacs-lisp
  (require 'haskell-mode)
  (require 'inf-haskell)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-doc-mode)
  (add-hook 'haskell-mode-hook 'turn-on-haskell-indentation)
  (add-hook 'haskell-mode-hook 'font-lock-mode)
  (add-hook 'haskell-mode-hook 'rainbow-delimiters-mode-enable)
  (setq haskell-font-lock-symbols t)
#+end_src
** smerge
http://atomized.org/2010/06/resolving-merge-conflicts-the-easy-way-with-smerge-kmacro/
#+begin_src emacs-lisp  
  
  (defun sm-try-smerge ()
    (save-excursion
      (goto-char (point-min))
      (when (re-search-forward "^<<<<<<< " nil t)
        (smerge-mode 1))))
  
  (add-hook 'find-file-hook 'sm-try-smerge t)
#+end_src
** cc-mode
#+begin_src emacs-lisp
  (defun qdot/cc-mode-hook ()
    (doxymacs-font-lock)
    (local-set-key (kbd "\C-m") 'newline-and-indent)
    (c-add-style "qdot/cc-code-style" '("bsd" (c-basic-offset . 2)))
    (c-set-style "qdot/cc-code-style")
    (c-set-offset 'innamespace 0)
    (semantic-mode 1)
    (subword-mode 1))
  
  (add-hook 'c-mode-common-hook 'qdot/cc-mode-hook)
  
  ;; doxymacs mode for editing doxygen
  (add-hook 'c-mode-common-hook 'doxymacs-mode)
#+end_src
** compilation
#+begin_src emacs-lisp  
  (require 'compile)
  (setq compilation-disable-input nil)
  (setq compilation-auto-jump-to-first-error t)
  (setq compilation-scroll-output 'first-error)
  (setq mode-compile-always-save-buffer-p t)
  
  (defun qdot/recompile ()
    "Run compile and resize the compile window closing the old one if necessary"
    (interactive)
    (progn
      (when (get-buffer "*compilation*")  ; If old compile window exists
        (delete-windows-on (get-buffer "*compilation*")) ; Delete the compilation windows
        (kill-buffer "*compilation*")) ; and kill the buffers
      (call-interactively 'compile)
      (enlarge-window 30)))
  
  (defun qdot/next-error ()
    "Move point to next error and highlight it"
    (interactive)
    (progn
      (next-error)
      (end-of-line-nomark)
      (beginning-of-line-mark)))
  
  (defun qdot/previous-error ()
    "Move point to previous error and highlight it"
    (interactive)
    (progn
      (previous-error)
      (end-of-line-nomark)
      (beginning-of-line-mark)))
  
  ;; (global-set-key (kbd "C-n") 'qdot/next-error)
  ;; (global-set-key (kbd "C-p") 'qdot/previous-error)
  
  (global-set-key [f5] 'qdot/recompile)
#+end_src
** CEDET
#+begin_src emacs-lisp  
  ;; Emacs freaks out if this isn't set.
  (setq warning-suppress-types nil) 
  
  ;;(add-to-list 'semantic-default-submodes 'global-semantic-idle-summary-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-mru-bookmark-mode)
  (add-to-list 'semantic-default-submodes 'global-semanticdb-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-decoration-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-idle-scheduler-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-stickyfunc-mode)
  (add-to-list 'semantic-default-submodes 'global-cedet-m3-minor-mode)
  (add-to-list 'semantic-default-submodes 'global-semantic-highlight-func-mode)
  ;;(add-to-list 'semantic-default-submodes 'global-semantic-show-unmatched-syntax-mode)
  ;;(add-to-list 'semantic-default-submodes 'global-semantic-highlight-edits-mode)
  ;;(add-to-list 'semantic-default-submodes 'global-semantic-show-parser-state-mode)
  
  (require 'semantic/bovine/c)
  (require 'semantic/bovine/gcc)
  (require 'semantic/bovine/clang)
  (require 'semantic/ia)
  (require 'semantic/decorate/include)
  (require 'semantic/lex-spp)
  
  ;; need to add CEDET contrib to bring in eassist
  (add-to-list 'load-path (expand-file-name 
         (concat
          qdot/emacs-autoinst-elisp-dir "cedet/contrib")))
  
  (require 'eassist)
  
  (setq-default semanticdb-default-save-directory "~/.emacs_meta/semanticdb/"
          semanticdb-default-system-save-directory "~/.emacs_meta/semanticdb/")
  
  (defun qdot/cedet-hook ()
    (add-to-list 'ac-sources 'ac-source-semantic)
    (local-set-key [(control return)] 'semantic-ia-complete-symbol)
    (local-set-key "\C-c?" 'semantic-ia-complete-symbol-menu)
    (local-set-key "\C-c>" 'semantic-complete-analyze-inline)
    (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle)
    (local-set-key "\C-cj" 'semantic-ia-fast-jump)
    (local-set-key "\C-cq" 'semantic-ia-show-doc)
    (local-set-key "\C-cs" 'semantic-ia-show-summary)
    (local-set-key "\C-cp" 'semantic-analyze-proto-impl-toggle))
  
  (add-hook 'c-mode-common-hook 'qdot/cedet-hook)
  (add-hook 'lisp-mode-hook 'qdot/cedet-hook)
  (add-hook 'emacs-lisp-mode-hook 'qdot/cedet-hook)
  
  (defun qdot/c-mode-cedet-hook ()
    (local-set-key (kbd "C-c o") 'eassist-switch-h-cpp)
    (local-set-key (kbd "C-c C-r") 'semantic-symref))
  (add-hook 'c-mode-common-hook 'qdot/c-mode-cedet-hook)
#+end_src  
** python-mode
#+begin_src emacs-lisp
  (defun qdot/python-mode-hook()
    (setq tab-width 4)
    (setq py-indent-offset 4)
    (setq python-indent-offset 4)
    (set-variable 'python-indent-guess-indent-offset nil t)
    (set-variable 'fill-paragraph-function 'python-fill-paragraph t)
    (subword-mode 1))
  
  ;;(elpy-enable)
  ;;(setq elpy-rpc-backend "jedi")
  
  (add-hook 'python-mode-hook 'qdot/python-mode-hook)
#+end_src  
** js2-mode
#+begin_src emacs-lisp
  (setq js-indent-level 2)
  (setq
   js2-auto-indent-p t
   js2-basic-offset 2
   js2-enter-indents-newline t
   js2-indent-on-enter-key t)
  
  ;; Fix for .js files that have Java set as the mode (I'm looking at
  ;; you, mozilla-central)
  (add-hook 'java-mode-hook
      (lambda ()
        (when (string-match "\\.js\\'" buffer-file-name)
          (js2-mode))))
  (add-hook 'js2-mode-hook
      (lambda ()
        (flycheck-mode)
        (flycheck-select-checker 'javascript-gjshint)))
#+end_src
** gdb
#+begin_src emacs-lisp
  ;; Turn off non-stop by default. All or nothing, damnit.
  (setq gdb-non-stop-setting nil)
  ;; gdb/gud
  (setq gdb-many-windows t)
  (setq gdb-show-main t)
  (setq gud-chdir-before-run nil)
  (setq gud-tooltip-mode t)  
#+end_src
** emacs-lisp-mode
#+begin_src emacs-lisp  
  ;; eldoc mode for showing function calls in mode line
  (setq eldoc-idle-delay 0)
  (autoload 'turn-on-eldoc-mode "eldoc" nil t)
  (add-hook 'emacs-lisp-mode-hook 'turn-on-eldoc-mode)
  (add-hook 'lisp-interaction-mode-hook 'turn-on-eldoc-mode)
  
  ;; stealin' things from esk
  (add-hook 'emacs-lisp-mode-hook 'esk-remove-elc-on-save)
  (add-hook 'emacs-lisp-mode-hook 'rainbow-delimiters-mode-enable)
  
  (defun esk-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))
  
  (define-key emacs-lisp-mode-map (kbd "C-c v") 'eval-buffer)
  (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
  
#+end_src
** unicode-fonts
Map unicode characters into the global character set. Really only
needed in ERC/twitter, and takes a while to load, so making loads mode
specific.

On debian derivatives, this will also require some font packages:
- ttf-indic-fonts
- fonts-sil*
- ttf-dejavu

Plus
From http://www.quivira-font.com/downloads.php - Quivira
From http://users.teilar.gr/~g1951d/ - Symbola

#+begin_src emacs-lisp
  (require 'unicode-fonts)
  (defun qdot/setup-unicode-fonts ()
    (when (not unicode-fonts-setup-done)
      (unicode-fonts-setup)))
  
  (add-hook 'twittering-mode-hook 'qdot/setup-unicode-fonts)
  (add-hook 'erc-mode-hook 'qdot/setup-unicode-fonts)
  
#+end_src
** smex
#+BEGIN_SRC emacs-lisp
  ;; Bind smex over M-x, deals with sorting most used commands to front of IDO
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+END_SRC
** expand-region
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-=") 'er/expand-region)
#+END_SRC
** ace-jump-mode
#+BEGIN_SRC emacs-lisp
  (define-key global-map (kbd "C-x SPC") 'ace-jump-mode)
#+END_SRC
** rect-mark
#+BEGIN_SRC emacs-lisp
  (require 'rect-mark)
  (global-set-key (kbd "C-x r C-SPC") 'rm-set-mark)
  (global-set-key (kbd "C-x r C-x")   'rm-exchange-point-and-mark)
  (global-set-key (kbd "C-x r C-w")   'rm-kill-region)
  (global-set-key (kbd "C-x r M-w")   'rm-kill-ring-save)
#+END_SRC
** smart-mode-line
#+BEGIN_SRC emacs-lisp
  (sml/setup)
  (add-to-list 'sml/replacer-regexp-list '("^~/code/git-projects/" ":GP:"))
  (add-to-list 'sml/replacer-regexp-list '("^~/.emacs_files/" ":EF:"))
  (add-to-list 'sml/replacer-regexp-list '("^~/code/mozbuild/" ":MOZ:"))
  (setq sml/hidden-modes
        '(" yas"
          " SP"
          " Fly"))
#+END_SRC
** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(rainbow-delimiters-depth-1-face ((t (:foreground "green" :weight extra-bold))))
   '(rainbow-delimiters-depth-2-face ((t (:foreground "forestgreen" :weight bold))))
   '(rainbow-delimiters-depth-3-face ((t (:foreground "lightseagreen" :weight bold))))
   '(rainbow-delimiters-depth-4-face ((t (:foreground "lightskyblue" :weight bold))))
   '(rainbow-delimiters-depth-5-face ((t (:foreground "cyan" :weight bold))))
   '(rainbow-delimiters-depth-6-face ((t (:foreground "steelblue" :weight bold))))
   '(rainbow-delimiters-depth-7-face ((t (:foreground "orchid" :weight bold))))
   '(rainbow-delimiters-depth-8-face ((t (:foreground "purple" :weight bold))))
   '(rainbow-delimiters-depth-9-face ((t (:foreground "hotpink" :weight bold))))
   '(rainbow-delimiters-unmatched-face ((t (:foreground "red" :weight bold)))))
#+END_SRC
** web-mode
#+BEGIN_SRC emacs-lisp
  (defun qdot/web-mode-hook ()
    (add-to-list 'ac-sources 'ac-source-yasnippet)
    (auto-complete-mode))
  (add-hook 'web-mode-hook 'qdot/web-mode-hook)
#+END_SRC
** multiterm
#+BEGIN_SRC emacs-lisp
  ;; Turn off yas otherwise tab screws up
  (add-hook 'term-mode-hook (lambda()
                  (yas-minor-mode -1)))
  
  (setq multi-term-program "/bin/zsh") ;; or use zsh...
  
  (global-set-key (kbd "C-c t") 'multi-term-next)
  (global-set-key (kbd "C-c T") 'multi-term) ;; create a new one
  
  (setq qdot/term-keylist
        '(("C-a" . qdot/smarter-move-beginning-of-line)
          ("C-e" . move-end-of-line)))
  
  (dolist (key qdot/term-keylist)
    (add-to-list 'term-bind-key-alist key))
#+END_SRC
** lilypond-mode
#+BEGIN_SRC emacs-lisp
  (require 'lilypond-mode)
  ;; Having fancy-comments on seems to completely screw indentation of single %
  ;; comments, which the mode uses for M-; comment blocks. Is fine to just be off.
  (setq LilyPond-fancy-comments nil)
#+END_SRC
** keyfreq
#+BEGIN_SRC emacs-lisp
  ;; (require 'keyfreq)
  ;; (keyfreq-mode 1)
  ;; (keyfreq-autosave-mode 1)
#+END_SRC
** qblog
#+BEGIN_SRC emacs-lisp
(require 'qblog)
#+END_SRC
** flx
#+BEGIN_SRC emacs-lisp
(require 'flx-ido)
#+END_SRC
** bitlmacs
#+BEGIN_SRC emacs-lisp
  (require 'bitlmacs)
  (bitlmacs/init-bitlmacs-placeholder)
#+END_SRC
* Keybinds
#+begin_src emacs-lisp
  (bind-key "C-c r"             'revert-buffer)
  (bind-key "C-c v"             'visual-line-mode)
  (bind-key "C-c e"             'eval-and-replace)
  (bind-key "C-x C-k"           'kill-region)
  (bind-key "C-x k"             'qdot/kill-this-buffer)
  (bind-key "C-x C-b"           'ibuffer-other-window)
  (bind-key "C-c C-m"           'execute-extended-command)
  (bind-key "C-c C-k"           'kill-region)
  (bind-key "C-M-g"             'goto-line)
  (bind-key "M-o"               'other-window)
  (bind-key "C->"               'mc/mark-next-like-this)
  (bind-key "C-<"               'mc/mark-previous-like-this)
  (bind-key "C-*"               'mc/mark-all-like-this)
  (bind-key "C-c SPC"           'ace-jump-mode)
  (bind-key "C-x C-m"           'shell)
  (bind-key "C-w"               'backward-kill-word) ;; make this like shell.
  (bind-key "C-x m"             'eshell)
  (bind-key "<C-f1>"            'wg-switch-to-workgroup-at-index-1)
  (bind-key "<C-f2>"            'wg-switch-to-workgroup-at-index-2)
  (bind-key "<C-f3>"            'wg-switch-to-workgroup-at-index-3)
  (bind-key "<C-f4>"            'wg-switch-to-workgroup-at-index-4)
  (bind-key "<C-f5>"            'wg-switch-to-workgroup-at-index-5)
  (bind-key "<C-XF86AudioNext>" 'wg-switch-to-workgroup-at-index-5)
  (bind-key "<C-right>"         'sp-forward-slurp-sexp)
  (bind-key "<C-left>"          'sp-forward-barf-sexp)
  (bind-key "<C-M-right>"       'sp-backward-slurp-sexp)
  (bind-key "<C-M-left>"        'sp-backward-barf-sexp)
  (bind-key "C-x M"   (lambda () (interactive) (eshell t)))
  ;; Don't need backgrounding
  (bind-key "C-z" nil)

  ;; Stealin' from esk

  ;; http://whattheemacsd.com//key-bindings.el-03.html
  (bind-key "M-j"
            (lambda ()
              (interactive)
              (join-line -1)))

#+end_src
* Function Warnings/Disables
#+BEGIN_SRC emacs-lisp
(put 'downcase-region 'disabled nil)
#+END_SRC
* Automodes
#+begin_src emacs-lisp
  ;; file extension mode recognition
  (add-to-list 'auto-mode-alist '("\\.\\(xml\\|mxml\\)$" . nxml-mode))
  (add-to-list 'auto-mode-alist '("\\.asciidoc$" . adoc-mode))
  (add-to-list 'auto-mode-alist '("\\.hs$" . haskell-mode))
  (add-to-list 'auto-mode-alist '("\\.html$" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.js$" . js2-mode))
  (add-to-list 'auto-mode-alist '("\\.jsm$" . js2-mode))
  (add-to-list 'auto-mode-alist '("ChangeLog\\.txt\\'" . change-log-mode))
  (add-to-list 'auto-mode-alist '("\\.org_archive$"  . org-mode))
  (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.jsp\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
  (add-to-list 'auto-mode-alist '("\\.ly\\'" . LilyPond-mode))
  
#+end_src
* Hooks
Extra hooks to functions from the qdot-funcs modules
#+BEGIN_SRC emacs-lisp
  ;; Make sure we want to quit
  (add-hook 'kill-emacs-query-functions 'qdot/ask-before-quit)
  
  ;; Whenever a mouse click has happened, clear the minibuffer
  (add-hook 'mouse-leave-buffer-hook 'qdot/stop-using-minibuffer)
  
  ;; Byte compile buffer whenever we save
  (add-hook 'after-save-hook 'qdot/byte-compile-current-buffer)
  
#+END_SRC
* Tasks
** TODO Add ability to open transcribe project related to lilypond file
** TODO Find all package
** TODO Find edit-list package
** TODO Add next-spec-day for arbitrary scheduling updates in org-mode
https://github.com/chenfengyuan/elisp/blob/master/next-spec-day.el
** TODO Check out git-messenger
[2013-07-22 Mon]
https://github.com/syohex/emacs-git-messenger
** TODO Add browse-kill-ring in el-get
[2013-07-22 Mon]

** TODO El-get page-break-lines
[2013-07-22 Mon]
** TODO Check out pretty-mode-plus
https://github.com/akatov/pretty-mode-plus
** TODO Check out Skewer for emacs
:LOGBOOK:
CLOCK: [2013-07-24 Wed 14:57]--[2013-07-24 Wed 14:58] =>  0:01
:END:
[2013-07-24 Wed]
http://nullprogram.com/blog/2012/10/31/

** TODO Fix agenda display of mozilla subtree in email task file
** TODO Make org date function that will show events on certain days AFTER a certain date
** DONE Go through config
CLOSED: [2014-04-10 Thu 19:28]
http://zeekat.nl/articles/making-emacs-work-for-me.html
** TODO Fix git gutter mode?
https://github.com/syohex/emacs-git-gutter-fringe
** TODO Do more configuration on smart-mode-line
https://github.com/Bruce-Connor/smart-mode-line
** TODO Figure out issues with schedule export
** TODO Make emacs autoblogging utility for blog and software sites
:PROPERTIES:
:ID: 1ce4cdcc-ddbe-48d6-9eb6-2b363d5db90c
:END:
   [2011-01-08 Sat]

   [[file:~/git-projects/nonpolynomial.com/libraries/index.html::<H2>libnifalcon</H2>]]
** TODO Work on eshell
** TODO Make fill columns for ERC auto-set for workgroup sizes?
** TODO Read Julian Danjou's config
http://git.naquadah.org/?p=~jd/emacs.d.git;a=tree
** TODO Check out UsePackage for emacs                               :emacs:
https://github.com/jwiegley/use-package
** TODO Work on memacs                                               :emacs:
** TODO Make sauron only notify for twitter when mentions or PMs received.
** TODO Create named emacs instances, make them come up in correct xmonad desktops
** TODO Fix org mode mailers
** TODO Make mu4e delete drafts after they are sent
   [2013-07-05 Fri]

** DONE Add sachac's mc keybindings
CLOSED: [2014-04-10 Thu 19:09]
("C->" . mc/mark-next-like-this)
("C-<" . mc/mark-previous-like-this)
("C-*" . mc/mark-all-like-this)
("C-c SPC" . ace-jump-mode)
** DONE Check out Sacha Chua's emacs config
CLOSED: [2014-04-10 Thu 18:37]
https://github.com/sachac/.emacs.d/blob/gh-pages/Sacha.org
** DONE Add bind-key recipe to el-get
CLOSED: [2014-04-10 Thu 18:52]
https://github.com/emacsattic/bind-key
** DONE Remove sauron dbus
CLOSED: [2014-04-10 Thu 18:36]
** DONE Modeline customization
CLOSED: [2013-11-02 Sat 16:09]
** DONE Use smartparens with highlighting
CLOSED: [2013-11-02 Sat 14:57]
http://emacsredux.com/blog/2013/11/01/highlight-matching-delimiters-with-smartparens
** DONE Make convenience function to edit config of current major mode
CLOSED: [2013-11-01 Fri 21:06]
** DONE Check out elpy                                               :emacs:
CLOSED: [2013-11-01 Fri 21:34]
:PROPERTIES:
:END:
http://blog.jorgenschaefer.de/2013/04/elpy-10-released.html
** DONE Fix IRC killing functions
CLOSED: [2013-05-03 Fri 21:39]
- State "DONE"       from "TODO"       [2013-05-03 Fri 21:39]
** DONE Fix IRC server buffer renaming functions
CLOSED: [2013-05-03 Fri 21:39]
- State "DONE"       from "TODO"       [2013-05-03 Fri 21:39]
** DONE Divide down large configurations into org subnodes
CLOSED: [2013-05-06 Mon 11:05]
- State "DONE"       from "TODO"       [2013-05-06 Mon 11:05]
** DONE Fix diminish mode sets
CLOSED: [2013-05-06 Mon 11:05]
- State "DONE"       from "TODO"       [2013-05-06 Mon 11:05]
** DONE defadvise erc-hide-current-message-p instead of monkeypatching erc-display-message for buffer-local erc-hide-list
CLOSED: [2013-05-06 Mon 18:52]
- State "DONE"       from "TODO"       [2013-05-06 Mon 18:52]
** DONE Set up local el-get recipes directory so we don't have to track el-get perfectly
CLOSED: [2013-05-06 Mon 20:52]
- State "DONE"       from "TODO"       [2013-05-06 Mon 20:52]
Used el-get-sources variable
** DONE Fix workgroups layouts
CLOSED: [2013-10-29 Tue 20:56]
** DONE Fix ERC privmsgs
CLOSED: [2013-10-29 Tue 20:56]
** DONE Set up BufferTimer
CLOSED: [2013-05-04 Sat 00:54]
- State "DONE"       from "TODO"       [2013-05-04 Sat 00:54]
https://github.com/hardaker/elisp-buffer-timer/
** DONE Set up unicode fonts in emacs
CLOSED: [2013-05-04 Sat 00:31]
- State "DONE"       from "TODO"       [2013-05-04 Sat 00:31]
https://github.com/rolandwalker/unicode-fonts
** DONE Check out js2-refactor
CLOSED: [2013-05-03 Fri 23:57]
- State "DONE"       from "TODO"       [2013-05-03 Fri 23:57]
** DONE Think about non-fixed width for non-code buffers?
CLOSED: [2013-05-03 Fri 23:56]
- State "CLOSED"     from "TODO"       [2013-05-03 Fri 23:56] \\
  No
** DONE Make header action for mark all read (in mu4e-contrib)
CLOSED: [2013-05-03 Fri 23:49]
- State "DONE"       from "TODO"       [2013-05-03 Fri 23:49]
** DONE Go through commit list for mu, add new functions/actions
CLOSED: [2013-05-03 Fri 23:47]
- State "DONE"       from "TODO"       [2013-05-03 Fri 23:47]
** DONE Add new mailbox shortcuts for kelly, receipts, etc...        :emacs:
CLOSED: [2013-05-03 Fri 23:26]
- State "DONE"       from "TODO"       [2013-05-03 Fri 23:26]
** DONE Turn on semantic in C++ buffers
CLOSED: [2013-05-03 Fri 22:19]
- State "DONE"       from "TODO"       [2013-05-03 Fri 22:19]
** DONE Turn on flyspell in buffers that need it
CLOSED: [2013-05-03 Fri 22:14]
- State "DONE"       from "TODO"       [2013-05-03 Fri 22:14]
** DONE Load mu4e-unread-main as part of startup
CLOSED: [2013-05-03 Fri 22:03]
- State "DONE"       from "TODO"       [2013-05-03 Fri 22:03]
** DONE Import contacts into BBDB3
CLOSED: [2012-08-25 Sat 21:23]
- State "DONE"       from "TODO"       [2012-08-25 Sat 21:23]
** DONE Move contacts into BBDB off iphone
CLOSED: [2012-08-25 Sat 21:24]
- State "DONE"       from "TODO"       [2012-08-25 Sat 21:24]
:PROPERTIES:
:ID: 74bfbc0a-3618-4567-a639-171aa0af2b24
:END:
   [2010-09-20 Mon]
   [[file:~/emacs_org/vienna2010.org::*2010%2009%2010][2010-09-10]]
** DONE See how sauron handles notifications for twitter/gnus
CLOSED: [2012-10-15 Mon 15:37]
- State "DONE"       from "TODO"       [2012-10-15 Mon 15:37]
:PROPERTIES:
:ID: 587c0a16-161f-482a-b950-f74c760dea78
:END:
** DONE Rename emacs_files_24 to just emacs_files again
CLOSED: [2012-10-15 Mon 15:47]
- State "DONE"       from "TODO"       [2012-10-15 Mon 15:47]
  [2012-04-27 Fri]
  [[file:~/emacs_org/org-reorg.org::*Files][Files]]
** DONE Read up more on mail sync
CLOSED: [2013-02-26 Tue 19:48]
- State "DONE"       from "TODO"       [2013-02-26 Tue 19:48]
** DONE Override java-mode to be js2-mode on all .js files
CLOSED: [2013-04-17 Wed 21:27]
- State "DONE"       from "TODO"       [2013-04-17 Wed 21:27]
  [2012-03-30 Fri]
  [[file:~/code/mozbuild/gaia/apps/settings/js/bluetooth.js::if(BluetoothAdapter.power)%20{][file:~/code/mozbuild/gaia/apps/settings/js/bluetooth.js::if(BluetoothAdapter.power) {]]
** DONE Fix rope mode to always have ignore_bad_imports equal to True
CLOSED: [2013-04-17 Wed 21:23]
- State "CLOSED"     from "TODO"       [2013-04-17 Wed 21:23] \\
  Not using rope anymore
:PROPERTIES:
:ID: 0757ee32-8d03-4745-8f00-74023cc739a2
:END:
   [2010-10-27 Wed]
   [[file:~/build/build_sys/python/FiveTenBuilder/apps/base.py::self._log.info("Application:%20%s\n",%20self.__class__.__name__)][file:~/build/build_sys/python/FiveTenBuilder/apps/base.py::self._log.info("Application: %s\n", self.__class__.__name__)]]
** CANCELLED Redo CEDET Setup                                    :CANCELLED:
CLOSED: [2014-04-10 Thu 18:31]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2014-04-10 Thu 18:31] \\
  Not happening. I give up.
:END:
** CANCELLED Divide out work setup from home setup               :CANCELLED:
CLOSED: [2013-10-29 Tue 21:00]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 21:00] \\
  Or not. This works well enough as is
:END:
** CANCELLED Make header/source search look at the buffer list first :CANCELLED:
CLOSED: [2013-10-29 Tue 20:59]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:59] \\
  Or, you know, just use a better switcher routine.
:END:
   :PROPERTIES:
   :ID:       831C60D2-5A9C-46C4-AFFD-D197F22E9731
   :END:
** CANCELLED Extend jekyll script to deal with multiple blogs    :CANCELLED:
CLOSED: [2013-10-29 Tue 20:58]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:58] \\
  Moved to pelican.
:END:
   :PROPERTIES:
   :ID:       6B223E71-B699-4B9D-836B-C9F061DC93AD
   :END:

** CANCELLED Check out projectile for emacs projects             :CANCELLED:
CLOSED: [2013-10-29 Tue 20:57]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:57] \\
  Didn't really work out. Onto like eproject or something.
:END:
:PROPERTIES:
:ID: 5c2bdb24-e177-45eb-a5c0-5b1ecacbbc45
:END:
https://github.com/bbatsov/projectile

** CANCELLED Check out ede which apparently now works with CMake? :CANCELLED:
CLOSED: [2013-10-29 Tue 20:57]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:57] \\
  NONONONONONO
:END:
** CANCELLED Add C-c . to org-disputed-keys, change to C-c c for calendar bring-up versus cedet/ede :CANCELLED:
CLOSED: [2013-10-29 Tue 20:57]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:57] \\
  No. We're never going to use ede. Fuck CEDET.
:END:
** CANCELLED Check out why rainbow delimiters don't like mozilla C++ files :CANCELLED:
CLOSED: [2013-10-29 Tue 20:56]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:56] \\
  rainbow delimiters is just broken in c++
:END:
** CANCELLED Yank frame/window detection for emacs from rcirc/dbus script :emacs:CANCELLED:
CLOSED: [2013-10-29 Tue 20:56]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:56]
:END:
http://www.emacswiki.org/emacs/rcircDbusNotification
** CANCELLED Make python flymake deal with missing linters better :CANCELLED:
CLOSED: [2013-10-29 Tue 20:56]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:56] \\
  Using flycheck now, which deals better anyways
:END:
** CANCELLED Make bitlbee workgroup regenerate whenever we get a new im
CLOSED: [2013-05-03 Fri 19:33]
- State "CLOSED"     from "TODO"       [2013-05-03 Fri 19:33] \\
  No
** CANCELLED Create special ERC buffer to show query buffer list
CLOSED: [2012-10-15 Mon 15:47]
- State "CANCELLED"  from "TODO"       [2012-10-15 Mon 15:47] \\
  Implementing via erc-nicklist
** CANCELLED Make todochiku notification for twitter mentions
CLOSED: [2012-10-15 Mon 15:36]
- State "CANCELLED"  from "TODO"       [2012-10-15 Mon 15:36] \\
  Not using todochiku anymore
:PROPERTIES:
:ID: 8a309bfb-abc0-4492-9eb7-3f7af4a30bd1
:END:
** CANCELLED Make todochiku notification for inbox receives
CLOSED: [2012-10-15 Mon 15:36]
- State "CANCELLED"  from "TODO"       [2012-10-15 Mon 15:36] \\
  Not using todochiku anymore
:PROPERTIES:
:ID: c315b3ab-448b-4134-af2f-0378af73dc24
:END:
** ERC Nicklist rewrite
*** DONE Create filter function to load things like lists of privmsg buffers
CLOSED: [2013-10-29 Tue 20:54]
*** CANCELLED Use hl-mode for hilighting per line               :CANCELLED:
CLOSED: [2013-10-29 Tue 20:54]
:LOGBOOK:
- State "CANCELLED"  from "TODO"       [2013-10-29 Tue 20:54] \\
  Just propertize by hand, hl-mode doesn't work well for multiple non-consecutive lines
:END:
*** TODO Remove cursor rendering
*** TODO Rewrite menu/query function
*** TODO Group handling?
*** TODO Host fetch handling
*** DONE Change nick/line faces based on status or privmsg
CLOSED: [2013-10-29 Tue 20:55]
*** DONE Make nicklist buffer show up in buffer list
CLOSED: [2013-10-29 Tue 20:55]
*** DONE Create command to clear erc-nicklist
CLOSED: [2013-10-29 Tue 20:55]
  [2012-03-30 Fri]

** ERC Privmsg mode
*** DONE Make keymap for last/next privmsg
CLOSED: [2013-10-29 Tue 20:54]
*** DONE Make trigger to clear erc-nicklist status on access
CLOSED: [2013-10-29 Tue 20:54]
*** TODO Gravatar image viewing?
*** TODO Make ido only list IMs?
** Workgroups Update
*** TODO Divide functionality into modules
*** TODO Removing pickling, make configuration files human readable
*** TODO Make more features enable/disable-able
*** TODO Per-workgroup buffer list implementations
*** TODO Stop workgroups.el from reloading file lists for workgroups
** mu4e/gnupg
*** DONE Set all past email address in mu4e-user-mail-address-list
CLOSED: [2013-02-18 Mon 22:21]
- State "DONE"       from "TODO"       [2013-02-18 Mon 22:21]
*** DONE Set up gpg to not require passwords all the time
CLOSED: [2013-02-18 Mon 22:25]
- State "DONE"       from "TODO"       [2013-02-18 Mon 22:25]
*** DONE Check out message actions ('a' in header view)
CLOSED: [2013-02-21 Thu 18:51]
- State "DONE"       from "TODO"       [2013-02-21 Thu 18:51]
*** DONE Change mu4e-view-show-addresses so I can see email addresses
CLOSED: [2013-02-21 Thu 18:58]
- State "DONE"       from "TODO"       [2013-02-21 Thu 18:58]
*** DONE Set up multiple account information for smtpmail
CLOSED: [2013-02-21 Thu 21:26]
- State "DONE"       from "TODO"       [2013-02-21 Thu 21:26]
*** DONE Set up bookmarks for oft used searches
CLOSED: [2013-02-21 Thu 22:34]
- State "DONE"       from "TODO"       [2013-02-21 Thu 22:34]
*** DONE Set up quick indexes to maildirs
CLOSED: [2013-02-26 Tue 19:54]
- State "DONE"       from "TODO"       [2013-02-26 Tue 19:54]
*** DONE Set up msmtp
CLOSED: [2013-02-26 Tue 21:32]
- State "DONE"       from "TODO"       [2013-02-26 Tue 21:32]
*** TODO Add mu notifications for sauron and xmonad
*** TODO Add optional display of mu update status in minibuffer
*** TODO Set up offlineimap to retrieve via mu4e
*** TODO Set up mail queuing in mu4e
*** TODO Set up encryption/checking in mu4e
*** TODO Encrypt maildir via truecrypt
*** TODO Figure out where to put maildir for transfer
*** TODO Look at key sharing via ssss or libgfshare
http://www.digital-scurf.org/software/libgfshare
*** TODO Speedbar setup for xmonad (automatic frame sizing)?
*** TODO Make autorefiling function for messages from Kelly
** Contexts
*** Email
**** TODO Fix files
*** Compilation
*** Scheduling
**** DONE Move all org mode events to special events file?
CLOSED: [2013-10-29 Tue 20:55]
*** Communication
*** Layout
