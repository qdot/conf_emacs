#+TITLE: External Package Setup
#+OPTIONS: toc:nil num:nil ^:nil
* quick-yes
Use M-y and M-n in y-or-n minibuffer prompts
#+begin_src emacs-lisp
  (require 'quick-yes)
#+end_src

* icomplete
#+begin_src emacs-lisp
  (icomplete-mode 1)
  (setq icomplete-compute-delay 0)
#+end_src

* scel
#+begin_src emacs-lisp
  (when (file-exists-p "~/.emacs_files/elisp_local/scel")
    (when macosx-p
      ;; Assume we're on a mac with SuperCollider in the normal spot
      (when (file-exists-p "/Applications/SuperCollider/sclang")
        (add-to-list 'load-path (expand-file-name "~/.emacs_files/elisp_local/scel/el"))
        (custom-set-variables
         '(sclang-auto-scroll-post-buffer t)
         '(sclang-eval-line-forward nil)
         '(sclang-help-path (quote ("/Applications/SuperCollider/Help")))
         '(sclang-runtime-directory "~/.sclang/")
         '(sclang-program "/Applications/SuperCollider/sclang"))
        (require 'sclang))))
#+end_src

* color-theme
#+begin_src emacs-lisp
  (color-theme-initialize)
  (color-theme-dark-laptop)     
#+end_src

* sml-modeline (scroll percentage info)
Modeline decorator to get rid of the horizontal scrollbar

Via http://emacs-fu.blogspot.com/2010/03/showing-buffer-position-in-mode-line.html

#+begin_src emacs-lisp
  (if (require 'sml-modeline nil 'noerror)    ;; use sml-modeline if available
      (progn 
        (sml-modeline-mode 1)                   ;; show buffer pos in the mode line
        (scroll-bar-mode -1))                   ;; turn off the scrollbar
    (scroll-bar-mode 1)                       ;; otherwise, show a scrollbar...
    (set-scroll-bar-mode 'right))             ;; ... on the right
#+end_src

* auto-complete
#+begin_src emacs-lisp
  (require 'auto-complete-config)
  (ac-config-default)
  (ac-flyspell-workaround)
  (ac-linum-workaround)
  (global-auto-complete-mode t)
  (setq ac-auto-start 3)
  (setq ac-dwim t)
  (set-default 'ac-sources '(ac-source-yasnippet)) ;; ac-source-semantic))
  (defun ielm-auto-complete ()
    "Enables `auto-complete' support in \\[ielm]."
    (setq ac-sources '(ac-source-functions
           ac-source-variables
           ac-source-features
           ac-source-symbols
           ac-source-words-in-same-mode-buffers))
    (add-to-list 'ac-modes 'inferior-emacs-lisp-mode)
    (auto-complete-mode 1))
  (add-hook 'ielm-mode-hook 'ielm-auto-complete)
  (define-key ac-complete-mode-map [tab] 'ac-expand)
#+end_src

* recentf
http://www.masteringemacs.org/articles/2011/01/27/find-files-faster-recent-files-package/

#+begin_src emacs-lisp
  (require 'recentf)
  
  ;; get rid of `find-file-read-only' and replace it with something
  ;; more useful.
  (defun ido-recentf-open ()
    "Use `ido-completing-read' to \\[find-file] a recent file"
    (interactive)
    (if (find-file (ido-completing-read "Find recent file: " recentf-list))
        (message "Opening file...")
      (message "Aborting")))
  
  (global-set-key (kbd "C-x C-r") 'ido-recentf-open)
  
  ;; enable recent files mode.
  (recentf-mode t)
  
  ;; 50 files ought to be enough.
  (setq recentf-max-saved-items 50)
  
  ;; link numbering for twittering mode
  (add-hook 'eshell-preoutput-filter-functions
      'ansi-color-filter-apply)
#+end_src

* twittering-mode
#+begin_src emacs-lisp
(require 'twittering-numbering)
(add-hook 'twittering-mode-hook 'twittering-numbering)
(setq twittering-icon-mode t)
(setq twittering-timer-interval 600)
(setq twittering-url-show-status nil)
(add-hook 'twittering-edit-mode-hook (lambda () 
				       (ispell-minor-mode) 
				       (flyspell-mode)))
#+end_src

* bbdb
#+begin_src emacs-lisp
;; (bbdb-initialize 'gnus 'message)
;; (bbdb-mua-auto-update-init 'gnus 'message)
(setq bbdb-phone-style 'nil)
#+end_src

* calfw
#+begin_src emacs-lisp
(require 'org-compat)
;; (require 'calfw)
;; (require 'calfw-org)
#+end_src

* popwin
#+begin_src emacs-lisp
;; (require 'popwin)
;; (setq display-buffer-function 'popwin:display-buffer)
#+end_src

* yasnippet
#+begin_src emacs-lisp
;; This will completely shit itself on HEAD as of 24.3 due to silly macro
;; definitions for called-interactively-p. Currently commenting those out in
;; yasnippet itself.
(require 'yasnippet)
(yas-global-mode 1)
(yas/load-directory "~/.emacs_files/elisp_auto/yasnippet/snippets")
#+end_src

* diminish
#+begin_src emacs-lisp
(require 'diminish)
(diminish 'yas-minor-mode " y")
;; (diminish 'org-indent-mode " i")
(diminish 'workgroups-mode " ω")
(diminish 'auto-complete-mode " α")
#+end_src


* ido
#+begin_src emacs-lisp
  (require 'ido)
  (ido-mode t)
  (ido-everywhere t)
  (setq ido-enable-flex-matching t)
  (setq ido-execute-command-cache nil)
  (setq ido-create-new-buffer 'always)
#+end_src

* uniquify
#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'reverse)
(setq uniquify-separator "|")
(setq uniquify-after-kill-buffer-p t)
(setq uniquify-ignore-buffers-re "^\\*")
#+end_src

* windmove
#+begin_src emacs-lisp
(require 'windmove)
(when (fboundp 'windmove-default-keybindings)
  (windmove-default-keybindings))
#+end_src

* saveplace
Make sure I always come back to the same place in a file
http://groups.google.com/group/comp.emacs/browse_thread/thread/c5e4c18b77a18512

#+begin_src emacs-lisp
(setq-default save-place t)
(require 'saveplace)
#+end_src

* tramp
#+begin_src emacs-lisp
(require 'tramp)
(setq tramp-default-method "ssh")
#+end_src

* ibuffer
#+begin_src emacs-lisp
  (require 'ibuffer)
  (setq ibuffer-default-sorting-mode 'major-mode)
  (setq ibuffer-always-show-last-buffer t)
  (setq ibuffer-view-ibuffer t)
  (setq ibuffer-show-empty-filter-groups nil)
  
  ;; Set up buffer groups based on file and mode types
  (setq ibuffer-saved-filter-groups
        (quote (("default"
                 ("Org" (mode . org-mode))
                 ("ERC" (mode . erc-mode))
                 ("Emacs Setup" (or
                                 (filename . "/.emacs_files/")
                                 (filename . "/.emacs_d/")
                                 (filename . "/emacs_d/")))
                 ("magit" (name . "magit"))
                 ("dired" (mode . dired-mode))
                 ("work projects" (filename . "/mozbuild/"))
                 ("home projects" (filename . "/git-projects/"))
                 ("emacs" (or
                           (name . "^\\*scratch\\*$")
                           (name . "^\\*Messages\\*$")))))))
  
  ;; Make sure we're always using our buffer groups
  (add-hook 'ibuffer-mode-hook
            (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
#+end_src

* ansi-color
#+begin_src emacs-lisp
(require 'ansi-color)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
#+end_src

* dired
#+begin_src emacs-lisp
;; dired modifications

;; one dired buffer, damnit
;; taken from http://bitbucket.org/kcfelix/emacsd/src/tip/init.el
(defun qdot/dired-init ()
  "Bunch of stuff to run for dired, either immediately or when it's
        loaded."
  (define-key dired-mode-map (kbd "C-s") 'dired-isearch-filenames-regexp)
  (define-key dired-mode-map (kbd "C-M-s") 'dired-isearch-filenames)
  (define-key dired-mode-map [return] 'joc-dired-single-buffer)
  (define-key dired-mode-map "v" 'joc-dired-single-buffer)
  (define-key dired-mode-map [mouse-1] 'joc-dired-single-buffer-mouse)
  (define-key dired-mode-map "^"
    (function
     (lambda nil (interactive) (joc-dired-single-buffer "..")))))

;; if dired's already loaded, then the keymap will be bound
(if (boundp 'dired-mode-map)
    ;; we're good to go; just add our bindings
    (qdot/dired-init)
  ;; it's not loaded yet, so add our bindings to the load-hook
  (add-hook 'dired-load-hook 'qdot/dired-init))

;; Additions to dired
;; http://nflath.com/2009/07/dired/

(require 'dired-x)
(require 'wdired)
(setq wdired-allow-to-change-permissions 'advanced)
(define-key dired-mode-map	      	      (kbd "r")		'wdired-change-to-wdired-mode)

;;Updated file system on all buffer switches if in dired mode
(defadvice switch-to-buffer-other-window (after auto-refresh-dired (buffer &optional norecord) activate)
  (if (equal major-mode 'dired-mode)
      (revert-buffer)))
(defadvice switch-to-buffer (after auto-refresh-dired (buffer &optional norecord) activate)
  (if (equal major-mode 'dired-mode)
      (revert-buffer)))
(defadvice display-buffer (after auto-refresh-dired (buffer &optional not-this-window frame)  activate)
  (if (equal major-mode 'dired-mode)
      (revert-buffer)))
(defadvice other-window (after auto-refresh-dired (arg &optional all-frame) activate)
  (if (equal major-mode 'dired-mode)
      (revert-buffer)))
#+end_src

* magit
(if macosx-p
    (custom-set-variables
     '(magit-git-executable "/usr/local/git/bin/git")))

;; Turn on narrowing
(put 'narrow-to-region 'disabled nil)

* easy-pg
#+begin_src emacs-lisp
;; Turn on easy-pg
;; (require 'epa-file)
;; (epa-file-enable)
;; (setq epa-file-cache-passphrase-for-symmetric-encryption t)
#+end_src

* twittering-mode
#+begin_src emacs-lisp
;; Twittering additions
(add-hook 'twittering-mode-hook (lambda () (visual-line-mode 1)))
#+end_src

* mu4e
#+begin_src emacs-lisp
(setq mu4e-maildir "~/Mail") ;; top-level Maildir
(setq mu4e-html2text-command "w3m -dump -T text/html")
(setq mu4e-view-prefer-html t)
#+end_src

* sauron
#+begin_src emacs-lisp
(setq sauron-separate-frame nil)
#+end_src

