* Close all buffers
#+begin_src emacs-lisp
  (defun close-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))
#+end_src

* Unfill paragraph
Stefan Monnier <foo at acm.org>. It is the opposite of fill-paragraph
Takes a multi-line paragraph and makes it into a single line of text.
#+begin_src emacs-lisp
  (defun unfill-paragraph ()
    (interactive)
    (let ((fill-column (point-max)))
      (fill-paragraph nil)))
#+end_src

* Ask before quitting
#+begin_src emacs-lisp
  (defun ask-before-quit ()
    "Ask me before I quit emacs if I think that's a good thing to do"
    (interactive)
    (yes-or-no-p "Do you really want to quit Emacs?"))
  (add-hook 'kill-emacs-query-functions 'ask-before-quit)
#+end_src

* Reload file with current position saved
#+begin_src emacs-lisp
  (defun reload-file ()
    (interactive)
    (let ((curr-scroll (window-vscroll)))
      (find-file (buffer-name))
      (set-window-vscroll nil curr-scroll)
      (message "Reloaded file")))
#+end_src

* Show just matches instead of everything in occur buffer
#+begin_src emacs-lisp
  (defun occurrences (regexp &rest ignore)
    "Show all matches for REGEXP in an `occur' buffer."
    ;; keep text covered by occur-prefix and match text-properties
    (interactive (occur-read-primary-args))
    (occur regexp)
    (with-current-buffer (get-buffer "*Occur*")
      (let ((inhibit-read-only t)
      delete-from
      pos)
        (save-excursion
    (while (setq pos (next-property-change (point)))
      (goto-char pos)
      (if (not (or (get-text-property (point) 'occur-prefix)
             (get-text-property (point) 'occur-match)))
          (if delete-from
        (delete-region delete-from (point))
      (setq delete-from (point)))
        (when delete-from
          (delete-region delete-from (point))
          (if (get-text-property (point) 'occur-prefix)
        (insert "\n")
      (insert " ")))
        (setq delete-from nil)))))))
#+end_src

* Make kill-ring-save/kill-region smarter based on mark position
#+begin_src emacs-lisp
  (defadvice kill-ring-save (before slick-copy activate compile)
    "When called interactively with no active region, copy a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (message "Copied line")
       (list (line-beginning-position)
       (line-beginning-position 2)))))
  (defadvice kill-region (before slick-cut activate compile)
    "When called interactively with no active region, kill a single line instead."
    (interactive
     (if mark-active (list (region-beginning) (region-end))
       (list (line-beginning-position)
       (line-beginning-position 2)))))
#+end_src

* Edit files as root
http://nflath.com/2009/08/tramp/

#+begin_src emacs-lisp
  (defun sudo-edit (&optional arg)
    (interactive "p")
    (if arg
        (find-file (concat "/sudo:root@localhost:" (ido-read-file-name "File: ")))
      (find-alternate-file (concat "/sudo:root@localhost:" buffer-file-name))))
  (defun sudo-edit-current-file ()
    (interactive)
    (let ((pos (point)))
      (find-alternate-file 
       (concat "/sudo:root@localhost:" (buffer-file-name (current-buffer))))
      (goto-char pos)))
#+end_src

* Rename a file and the buffer it's in at the same time
Via yeggeconf http://sites.google.com/site/steveyegge2/my-dot-emacs-file

#+begin_src emacs-lisp
  (defun rename-file-and-buffer ()
    "Renames current buffer and file it is visiting."
    (interactive)
    (let ((name (buffer-name))
          (filename (buffer-file-name)))
      (if (not (and filename (file-exists-p filename)))
          (message "Buffer '%s' is not visiting a file!" name)
        (let ((new-name (read-file-name "New name: " filename)))
          (cond ((get-buffer new-name)
                 (message "A buffer named '%s' already exists!" new-name))
                (t
                 (rename-file name new-name 1)
                 (rename-buffer new-name)
                 (set-visited-file-name new-name)
                 (set-buffer-modified-p nil)))))))
#+end_src

* Abort minibuffer when mousing
http://trey-jackson.blogspot.com/2010/04/emacs-tip-36-abort-minibuffer-when.html

#+begin_src emacs-lisp
  (defun stop-using-minibuffer ()
    "kill the minibuffer"
    (when (>= (recursion-depth) 1)
      (abort-recursive-edit)))
  (add-hook 'mouse-leave-buffer-hook 'stop-using-minibuffer)
#+end_src

* Simple filter function
http://www.emacswiki.org/emacs/ElispCookbook
#+begin_src emacs-lisp
  (defun qdot/filter (condp lst)
    (delq nil
    (mapcar (lambda (x) (and (funcall condp x) x)) lst)))
#+end_src

* Return major mode of a buffer
http://stackoverflow.com/questions/2238418/emacs-lisp-how-to-get-buffer-major-mode
#+begin_src emacs-lisp
  (defun qdot/buffer-mode (buffer-or-string)
    "Returns the major mode associated with a buffer."
    (save-excursion
      (set-buffer buffer-or-string)
      major-mode))
#+end_src

* Open current buffer file in browser
#+begin_src emacs-lisp
  (defun qdot/open-in-browser()
    (interactive)
    (let ((filename (buffer-file-name)))
      (browse-url (concat "file://" filename))))
#+end_src

* Evaluate and replace preceding sexp
#+begin_src emacs-lisp
  (defun eval-and-replace ()
    "Replace the preceding sexp with its value."
    (interactive)
    (backward-kill-sexp)
    (condition-case nil
        (prin1 (eval (read (current-kill 0)))
               (current-buffer))
      (error (message "Invalid expression")
             (insert (current-kill 0)))))
#+end_src

* Delete current buffer and file
http://blog.tuxicity.se/elisp/emacs/2010/11/16/delete-file-and-buffer-in-emacs.html
#+begin_src emacs-lisp
  (defun delete-buffer-and-file ()
    "Removes file connected to current buffer and kills buffer."
    (interactive)
    (let ((filename (buffer-file-name))
          (buffer (current-buffer))
          (name (buffer-name)))
      (if (not (and filename (file-exists-p filename)))
          (error "Buffer '%s' is not visiting a file!" name)
        (when (yes-or-no-p "Are you sure you want to remove this file? ")
          (delete-file filename)
          (kill-buffer buffer)
          (message "File '%s' successfully removed" filename)))))
#+end_src

* Insert a uuid at current position using uuidgen
#+begin_src emacs-lisp
  (defun qdot/insert-uuid ()
    (interactive)
    (shell-command-on-region (point) (point) "uuidgen" t)
    (delete-backward-char 1))
#+end_src

* Clear kill ring
#+begin_src emacs-lisp
  (defun qdot/clear-kill-ring ()
    (setq kill-ring nil))
#+end_src

* Override org-agenda-open-in-other-window
Used to make org-agenda pop into the large window available on the agenda workgroup.
#+begin_src emacs-lisp
  (defun qdot/org-agenda-open-in-other-window()
    (interactive)
    (when (and workgroups-mode
         (eq (wg-get-workgroup "agenda") (wg-current-workgroup)))
      (setq pop-up-windows nil)
      (org-agenda-switch-to)
      (setq pop-up-windows t))
    (org-agenda-switch-to))
#+end_src

